'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadSVG = exports.downloadPNGFromSVG = undefined;

var _svgUtils = require('./svgUtils');

var _fileSaver = require('file-saver');

var _fileSaver2 = _interopRequireDefault(_fileSaver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var downloadPNGFromSVG = exports.downloadPNGFromSVG = function downloadPNGFromSVG(svg, graph, type) {
  var svgObj = (0, _svgUtils.prepareForExport)(svg, graph, type);
  var svgData = htmlCharacterRefToNumericalRef(svgObj.node());

  var canvas = void 0;
  canvas = document.createElement('canvas');
  canvas.width = svgObj.attr('width');
  canvas.height = svgObj.attr('height');

  window.canvg(canvas, svgData);
  return downloadWithDataURI(type + '.png', canvas.toDataURL('image/png'));
};

var downloadSVG = exports.downloadSVG = function downloadSVG(svg, graph, type) {
  var svgObj = (0, _svgUtils.prepareForExport)(svg, graph, type);
  var svgData = htmlCharacterRefToNumericalRef(svgObj.node());

  return download(type + '.svg', 'image/svg+xml;charset=utf-8', svgData);
};

var htmlCharacterRefToNumericalRef = function htmlCharacterRefToNumericalRef(node) {
  return new window.XMLSerializer().serializeToString(node).replace(/&nbsp;/g, '&#160;');
};

var download = function download(filename, mime, data) {
  var blob = new Blob([data], { type: mime });
  return _fileSaver2.default.saveAs(blob, filename);
};

var downloadWithDataURI = function downloadWithDataURI(filename, dataURI) {
  var byteString, i, ia, j, mimeString, ref;
  byteString = null;
  if (dataURI.split(',')[0].indexOf('base64') >= 0) {
    byteString = window.atob(dataURI.split(',')[1]);
  } else {
    byteString = unescape(dataURI.split(',')[1]);
  }
  mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
  ia = new Uint8Array(byteString.length);
  for (i = j = 0, ref = byteString.length; ref >= 0 ? j <= ref : j >= ref; i = ref >= 0 ? ++j : --j) {
    ia[i] = byteString.charCodeAt(i);
  }
  return download(filename, mimeString, ia);
};
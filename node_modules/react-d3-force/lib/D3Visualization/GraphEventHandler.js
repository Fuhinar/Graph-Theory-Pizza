'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphEventHandler = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _mapper = require('./mapper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GraphEventHandler = exports.GraphEventHandler = function () {
  function GraphEventHandler(graph, graphView, getNodeNeighbours, onItemMouseOver, onItemSelected, onGraphModelChange, onEventListener) {
    _classCallCheck(this, GraphEventHandler);

    this.graph = graph;
    this.graphView = graphView;
    this.getNodeNeighbours = getNodeNeighbours;
    this.selectedItem = null;
    this.rightClickedItem = null;
    this.onItemMouseOver = onItemMouseOver;
    this.onItemSelected = onItemSelected;
    this.onEventListener = onEventListener;
    this.onGraphModelChange = onGraphModelChange;
    this.ctrlClickedMap = {};
    this.ctrlClickedArr = [];
    this.rightClickedMap = {};
  }

  _createClass(GraphEventHandler, [{
    key: 'graphModelChanged',
    value: function graphModelChanged() {
      this.onGraphModelChange((0, _mapper.getGraphStats)(this.graph));
    }
  }, {
    key: 'selectItem',
    value: function selectItem(item) {
      if (this.selectedItem) {
        this.selectedItem.selected = false;
      }
      this.selectedItem = item;
      item.selected = true;
      this.graphView.update();
    }
  }, {
    key: 'deselectItem',
    value: function deselectItem() {
      var isUpdate = this.selectedItem || this.rightClickedItem;
      if (this.selectedItem) {
        this.selectedItem.selected = false;
        this.selectedItem = null;
      }
      if (this.rightClickedItem) {
        this.rightClickedItem.rightClicked = false;
        this.rightClickedItem = null;
      }
      this.onItemSelected({
        type: 'canvas',
        item: {
          nodeCount: this.graph.nodes().length,
          relationshipCount: this.graph.relationships().length
        }
      });
      if (isUpdate) {
        this.graphView.update();
      }
    }
  }, {
    key: 'nodeClose',
    value: function nodeClose(d) {
      this.graph.removeConnectedRelationships(d);
      this.graph.removeNode(d);
      this.deselectItem();
      this.graphView.update();
      this.graphModelChanged();
    }
  }, {
    key: 'nodeClicked',
    value: function nodeClicked(d) {
      console.log(d);
      if (!d) {
        return;
      }
      var _d3$event = _d2.default.event,
          layerX = _d3$event.layerX,
          layerY = _d3$event.layerY;

      if (d.rightClicked) {
        d.rightClicked = false;
      }
      d.fixed = true;
      if (!d.selected) {
        this.selectItem(d);
        this.onItemSelected({
          type: 'node',
          item: { id: d.id, labels: d.labels, properties: d.propertyList, layerX: layerX, layerY: layerY }
        });
      } else {
        this.deselectItem();
      }

      this.onEventListener({
        type: 'nodeClicked',
        item: d
      });
    }
  }, {
    key: 'onNodeCtrlClick',
    value: function onNodeCtrlClick(d) {
      if (!d) return;
      if (!d.ctrlClicked) {
        d.ctrlClicked = true;
        this.ctrlClickedArr.push(d.id);
      } else {
        d.ctrlClicked = false;
        this.ctrlClickedArr = this.ctrlClickedArr.filter(function (v) {
          return v.id != d.id;
        });
      }
      this.onEventListener({
        type: 'nodeCtrlClicked',
        item: d
      });
      this.graphView.update();
    }
  }, {
    key: 'onNodeClickRight',
    value: function onNodeClickRight(d) {
      if (!d) return;
      if (d.selected) {
        d.selected = false;
      }
      if (this.rightClickedItem && this.rightClickedItem.rightClicked) {
        this.rightClickedItem.rightClicked = false;
      }
      this.rightClickedItem = d;
      if (!d.rightClicked) {
        d.rightClicked = true;
        this.rightClickedMap[d.id] = d;
      } else {
        d.rightClicked = false;
      }
      this.onEventListener({
        type: 'nodeRightClicked',
        item: d
      });
      this.graphView.update();
    }
  }, {
    key: 'nodeUnlock',
    value: function nodeUnlock(d) {
      if (!d) {
        return;
      }
      d.fixed = false;
      this.deselectItem();
    }
  }, {
    key: 'nodeDelete',
    value: function nodeDelete(d) {
      this.onEventListener({
        type: 'nodeDelete',
        item: d
      });
    }
  }, {
    key: 'nodeNew',
    value: function nodeNew(d) {
      this.onEventListener({
        type: 'nodeNew',
        item: d
      });
    }
  }, {
    key: 'nodeEdit',
    value: function nodeEdit(d) {
      // message.success('修改节点,功能开发中!');
      this.onEventListener({
        type: 'nodeEdit',
        item: d
      });
    }
  }, {
    key: 'nodeDblClicked',
    value: function nodeDblClicked(d) {
      if (d.expanded) {
        this.nodeCollapse(d);
        return;
      }
      d.expanded = true;
      this.onEventListener({
        type: 'nodeDbClicked',
        item: d
      });
    }
  }, {
    key: 'nodeCollapse',
    value: function nodeCollapse(d) {
      d.expanded = false;
      this.graph.collapseNode(d);
      this.graphView.update();
      this.graphModelChanged();
    }
  }, {
    key: 'onNodeMouseOver',
    value: function onNodeMouseOver(node) {
      if (!node.contextMenu) {
        this.onItemMouseOver({
          type: 'node',
          item: {
            id: node.id,
            labels: node.labels,
            properties: node.propertyList
          }
        });
      }
      // 增加节点的hover事件
      if (this.hoveredItem) {
        this.hoveredItem.hovered = false;
      }

      this.onEventListener({
        type: 'nodeMouseOver',
        item: node
      });
      this.hoveredItem = node;
      node.hovered = true;
      // this.graphView.update();
    }
  }, {
    key: 'onMenuMouseOver',
    value: function onMenuMouseOver(itemWithMenu) {
      this.onItemMouseOver({
        type: 'context-menu-item',
        item: {
          label: itemWithMenu.contextMenu.label,
          content: itemWithMenu.contextMenu.menuContent,
          selection: itemWithMenu.contextMenu.menuSelection
        }
      });
      this.onEventListener({
        type: 'menuMouseOver',
        item: itemWithMenu
      });
    }
  }, {
    key: 'onRelationshipMouseOver',
    value: function onRelationshipMouseOver(relationship) {
      this.onItemMouseOver({
        type: 'relationship',
        item: {
          id: relationship.id,
          type: relationship.type,
          properties: relationship.propertyList
        }
      });
      this.onEventListener({
        type: 'relationshipMouseOver',
        item: relationship
      });
    }
  }, {
    key: 'onRelationshipClicked',
    value: function onRelationshipClicked(relationship) {
      if (!relationship.selected) {
        this.selectItem(relationship);
        this.onItemSelected({
          type: 'relationship',
          item: {
            id: relationship.id,
            type: relationship.type,
            properties: relationship.propertyList
          }
        });
      } else {
        this.deselectItem();
      }
      this.onEventListener({
        type: 'relationshipClicked',
        item: relationship
      });
    }
  }, {
    key: 'onCanvasClicked',
    value: function onCanvasClicked() {
      // update 函数 放在 onEventListener 上方 会导致 页面svg节点抖动 位置重新计算
      this.onEventListener({
        type: 'canvasClicked',
        item: null
      });

      this.deselectItem();
    }
  }, {
    key: 'onItemMouseOut',
    value: function onItemMouseOut(item) {
      this.onItemMouseOver({
        type: 'canvas',
        item: {
          nodeCount: this.graph.nodes().length,
          relationshipCount: this.graph.relationships().length
        }
      });
      this.onEventListener({
        type: 'canvasMouseOver',
        item: item
      });
    }
    // 反选

  }, {
    key: 'onContrarySelected',
    value: function onContrarySelected(item) {
      this.onEventListener({
        type: 'contrarySelected',
        item: item
      });
    }
    //清除选择 

  }, {
    key: 'onClearSelected',
    value: function onClearSelected(item) {
      this.onEventListener({
        type: 'clearSelected',
        item: item
      });
    }
    // 撤回到上一种状态

  }, {
    key: 'onBackStatus',
    value: function onBackStatus(item) {
      this.onEventListener({
        type: 'backStatus',
        item: item
      });
    }
    // 回到初始状态

  }, {
    key: 'onInitStatus',
    value: function onInitStatus(item) {
      this.onEventListener({
        type: 'initStatus',
        item: item
      });
    }
  }, {
    key: 'ani',
    value: function ani(arr) {
      var loop = function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var i;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  i = 0;

                case 1:
                  if (!(i < arr.length)) {
                    _context.next = 7;
                    break;
                  }

                  _context.next = 4;
                  return single(arr[i], i);

                case 4:
                  i++;
                  _context.next = 1;
                  break;

                case 7:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function loop() {
          return _ref.apply(this, arguments);
        };
      }();

      var graph = this.graph,
          graphView = this.graphView,
          graphModelChanged = this.graphModelChanged;

      var _this = this;
      function single(a, i) {
        return new Promise(function (resolve, reject) {
          var eN = Object.values(a.extend.nodesMap);
          var eR = Object.values(a.extend.relationshipsMap);
          var lN = Object.values(a.link.nodesMap);
          var lR = Object.values(a.link.relationshipsMap);
          var eN1 = eN.concat(lN);
          var eR1 = eR.concat(lR);
          if (eN1.length > 0 || eR1.length > 0) {
            var time = setTimeout(function () {
              graph.addNodes((0, _mapper.mapNodes)(eN1));
              graph.addRelationships((0, _mapper.mapRelationships)(eR1, graph));
              graphView.update();
              graphModelChanged.call(_this);
              clearTimeout(time);
              _d2.default.selectAll('.node-node_link_' + i).attr('opacity', 0.5);
              _d2.default.selectAll('.node-relation_link_' + i).attr('opacity', 0.5);
              _d2.default.selectAll('.node-node_expend').attr('opacity', 0.5);
              _d2.default.selectAll('.node-relation_expend').attr('opacity', 0.5);
              _d2.default.selectAll('.node-node_expend').transition().duration(3000).ease('linear').attr('opacity', 0).each('end', function (d) {
                _d2.default.selectAll('.node-node_expend').remove();
                graph.removeNodes(eN);
              });
              _d2.default.selectAll('.node-relation_expend').transition().duration(3000).ease('linear').attr('opacity', 0).each('end', function (d) {
                _d2.default.selectAll('.node-relation_expend').remove();
                graph.removeConnectedRelationshipss(eN);
              });
              _d2.default.selectAll('.node-node_link_' + i).transition().duration(3000).ease('linear').attr('opacity', 1);
              _d2.default.selectAll('.node-relation_link_' + i).transition().duration(3000).ease('linear').attr('opacity', 1).each('end', function (d) {
                resolve();
              });
            }, 1000);
          }
        });
      }

      loop();
    }
    // 播放过度动画

  }, {
    key: 'onStartFrame',
    value: function onStartFrame(item) {
      this.graph.resetGraph();
      this.graphView.update();
      // let _this = this;
      // let {graph,graphView,graphModelChanged} = this;

      this.onEventListener({
        type: 'startFrame',
        item: this.ctrlClickedArr
      }
      // function (params) {
      //   graph.startFrame = true;
      //   let {source,target} = params;
      //   graph.addNodes(mapNodes([source,target]))
      //   graphView.update()
      //   graphModelChanged.call(_this)
      //   let n = 0;
      //   graphView.viz.force.on('end',d=>{
      //     n++;
      //       d3.select('.'+source.className)
      //         .transition()
      //         .duration(800)
      //         .attr('transform','translate(-200,-200)')
      //         .ease('linear')
      //         .each('end',function (d) {
      //           d.x = -200;d.y = -200;d.px = -200;d.py = -200;d.fx = -200;d.fy = -200;d.fixed = true;
      //           if(n == 1){
      //             _this.ani.call(_this,params.path);
      //           }
      //         })
      //       d3.select('.'+target.className)
      //         .transition()
      //         .duration(800)
      //         .attr('transform','translate(400,400)')
      //         .ease('linear')
      //         .each('end',function name(d) {
      //           d.x = 400;d.y = 400;d.px = 400;d.py = 400;d.fx = 400;d.fy = 400;d.fixed = true;
      //         })
      //   })
      // }
      );
    }
  }, {
    key: 'bindEventHandlers',
    value: function bindEventHandlers() {
      this.graphView.on('nodeMouseOver', this.onNodeMouseOver.bind(this)).on('nodeMouseOut', this.onItemMouseOut.bind(this)).on('menuMouseOver', this.onMenuMouseOver.bind(this)).on('menuMouseOut', this.onItemMouseOut.bind(this)).on('relMouseOver', this.onRelationshipMouseOver.bind(this)).on('relMouseOut', this.onItemMouseOut.bind(this)).on('relationshipClicked', this.onRelationshipClicked.bind(this)).on('canvasClicked', this.onCanvasClicked.bind(this)).on('nodeClose', this.nodeClose.bind(this)).on('nodeClicked', this.nodeClicked.bind(this)).on('nodeDblClicked', this.nodeDblClicked.bind(this)).on('nodeUnlock', this.nodeUnlock.bind(this)).on('nodeDelete', this.nodeDelete.bind(this)).on('nodeNew', this.nodeNew.bind(this)).on('nodeEdit', this.nodeEdit.bind(this)).on('nodeCtrlClick', this.onNodeCtrlClick.bind(this)).on('nodeClickRight', this.onNodeClickRight.bind(this)).on('contrarySelected', this.onContrarySelected.bind(this)).on('clearSelected', this.onClearSelected.bind(this)).on('backStatus', this.onBackStatus.bind(this)).on('initStatus', this.onInitStatus.bind(this)).on('startFrame', this.onStartFrame.bind(this));
      this.onItemMouseOut();
    }
  }]);

  return GraphEventHandler;
}();
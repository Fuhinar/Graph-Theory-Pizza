'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _textMeasurement = require('./textMeasurement');

var _textMeasurement2 = _interopRequireDefault(_textMeasurement);

var _circumferentialDistribution = require('./circumferentialDistribution');

var _circumferentialDistribution2 = _interopRequireDefault(_circumferentialDistribution);

var _straightArrow = require('./straightArrow');

var _straightArrow2 = _interopRequireDefault(_straightArrow);

var _arcArrow = require('./arcArrow');

var _arcArrow2 = _interopRequireDefault(_arcArrow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var circumferentialRelationshipRouting = function () {
  function circumferentialRelationshipRouting(style) {
    _classCallCheck(this, circumferentialRelationshipRouting);

    this.style = style;
  }

  _createClass(circumferentialRelationshipRouting, [{
    key: 'measureRelationshipCaption',
    value: function measureRelationshipCaption(relationship, caption) {
      var fontFamily = 'sans-serif';
      var fontSize = parseFloat(this.style.forRelationship(relationship).get('font-size'));
      var padding = parseFloat(this.style.forRelationship(relationship).get('padding'));
      return (0, _textMeasurement2.default)(caption, fontFamily, fontSize) + padding * 2;
    }
  }, {
    key: 'captionFitsInsideArrowShaftWidth',
    value: function captionFitsInsideArrowShaftWidth(relationship) {
      return parseFloat(this.style.forRelationship(relationship).get('shaft-width')) > parseFloat(this.style.forRelationship(relationship).get('font-size'));
    }
  }, {
    key: 'measureRelationshipCaptions',
    value: function measureRelationshipCaptions(relationships) {
      var _this = this;

      return function () {
        var result = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Array.from(relationships)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var relationship = _step.value;

            relationship.captionLength = _this.measureRelationshipCaption(relationship, relationship.type);
            result.push(relationship.captionLayout = _this.captionFitsInsideArrowShaftWidth(relationship) ? 'internal' : 'external');
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return result;
      }();
    }
  }, {
    key: 'shortenCaption',
    value: function shortenCaption(relationship, caption, targetWidth) {
      var shortCaption = caption;
      while (true) {
        if (shortCaption.length <= 2) {
          return ['', 0];
        }
        shortCaption = shortCaption.substr(0, shortCaption.length - 2) + '\u2026';
        var width = this.measureRelationshipCaption(relationship, shortCaption);
        if (width < targetWidth) {
          return [shortCaption, width];
        }
      }
    }
  }, {
    key: 'layoutRelationships',
    value: function layoutRelationships(graph) {
      var _this2 = this;

      var dx = void 0,
          dy = void 0;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Array.from(graph.relationships())[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var relationship = _step2.value;

          dx = relationship.target.x - relationship.source.x;
          dy = relationship.target.y - relationship.source.y;
          relationship.naturalAngle = (Math.atan2(dy, dx) / Math.PI * 180 + 180) % 360;
          delete relationship.arrow;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var sortedNodes = graph.nodes().sort(function (a, b) {
        return b.relationshipCount(graph) - a.relationshipCount(graph);
      });

      return function () {
        var result = [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = Array.from(sortedNodes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var node = _step3.value;

            var angle;
            var relationships = [];
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = Array.from(graph.relationships())[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                relationship = _step4.value;

                if (relationship.source === node || relationship.target === node) {
                  relationships.push(relationship);
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            var arrowAngles = { floating: {}, fixed: {} };
            var relationshipMap = {};
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
              for (var _iterator5 = Array.from(relationships)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                relationship = _step5.value;

                relationshipMap[relationship.id] = relationship;

                if (node === relationship.source) {
                  if (relationship.hasOwnProperty('arrow')) {
                    arrowAngles.fixed[relationship.id] = relationship.naturalAngle + relationship.arrow.deflection;
                  } else {
                    arrowAngles.floating[relationship.id] = relationship.naturalAngle;
                  }
                }
                if (node === relationship.target) {
                  if (relationship.hasOwnProperty('arrow')) {
                    arrowAngles.fixed[relationship.id] = (relationship.naturalAngle - relationship.arrow.deflection + 180) % 360;
                  } else {
                    arrowAngles.floating[relationship.id] = (relationship.naturalAngle + 180) % 360;
                  }
                }
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                  _iterator5.return();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }

            var distributedAngles = {};
            for (var id in arrowAngles.floating) {
              angle = arrowAngles.floating[id];
              distributedAngles[id] = angle;
            }
            for (id in arrowAngles.fixed) {
              angle = arrowAngles.fixed[id];
              distributedAngles[id] = angle;
            }

            if (relationships.length > 1) {
              distributedAngles = (0, _circumferentialDistribution2.default)(arrowAngles, 30);
            }

            result.push(function () {
              var result1 = [];
              for (id in distributedAngles) {
                angle = distributedAngles[id];
                relationship = relationshipMap[id];
                if (!relationship.hasOwnProperty('arrow')) {
                  var _Array$from, _Array$from2;

                  var ref;
                  var deflection = node === relationship.source ? angle - relationship.naturalAngle : (relationship.naturalAngle - angle + 180) % 360;

                  var shaftRadius = parseFloat(_this2.style.forRelationship(relationship).get('shaft-width')) / 2 || 2;
                  var headRadius = shaftRadius + 3;
                  var headHeight = headRadius * 2;

                  dx = relationship.target.x - relationship.source.x;
                  dy = relationship.target.y - relationship.source.y;

                  var square = function square(distance) {
                    return distance * distance;
                  };
                  var centreDistance = Math.sqrt(square(dx) + square(dy));

                  if (Math.abs(deflection) < Math.PI / 180) {
                    relationship.arrow = new _straightArrow2.default(relationship.source.radius, relationship.target.radius, centreDistance, shaftRadius, headRadius, headHeight, relationship.captionLayout);
                  } else {
                    relationship.arrow = new _arcArrow2.default(relationship.source.radius, relationship.target.radius, centreDistance, deflection, shaftRadius * 2, headRadius * 2, headHeight, relationship.captionLayout);
                  }

                  result1.push((_Array$from = Array.from(ref = relationship.arrow.shaftLength > relationship.captionLength ? [relationship.caption, relationship.captionLength] : _this2.shortenCaption(relationship, relationship.caption, relationship.arrow.shaftLength)), _Array$from2 = _slicedToArray(_Array$from, 2), relationship.shortCaption = _Array$from2[0], relationship.shortCaptionLength = _Array$from2[1], _Array$from), ref);
                } else {
                  result1.push(undefined);
                }
              }
              return result1;
            }());
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return result;
      }();
    }
  }]);

  return circumferentialRelationshipRouting;
}();

exports.default = circumferentialRelationshipRouting;
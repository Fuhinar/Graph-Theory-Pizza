'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _textMeasurement = require('./textMeasurement');

var _textMeasurement2 = _interopRequireDefault(_textMeasurement);

var _loopArrow = require('./loopArrow');

var _loopArrow2 = _interopRequireDefault(_loopArrow);

var _straightArrow = require('./straightArrow');

var _straightArrow2 = _interopRequireDefault(_straightArrow);

var _arcArrow = require('./arcArrow');

var _arcArrow2 = _interopRequireDefault(_arcArrow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PairwiseArcsRelationshipRouting = function () {
  function PairwiseArcsRelationshipRouting(style) {
    _classCallCheck(this, PairwiseArcsRelationshipRouting);

    this.style = style;
  }

  _createClass(PairwiseArcsRelationshipRouting, [{
    key: 'measureRelationshipCaption',
    value: function measureRelationshipCaption(relationship, caption) {
      var fontFamily = 'sans-serif';
      var padding = parseFloat(this.style.forRelationship(relationship).get('padding'));
      return (0, _textMeasurement2.default)(caption, fontFamily, relationship.captionHeight) + padding * 2;
    }
  }, {
    key: 'captionFitsInsideArrowShaftWidth',
    value: function captionFitsInsideArrowShaftWidth(relationship) {
      return parseFloat(this.style.forRelationship(relationship).get('shaft-width')) > relationship.captionHeight;
    }
  }, {
    key: 'measureRelationshipCaptions',
    value: function measureRelationshipCaptions(relationships) {
      var _this = this;

      return function () {
        var result = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Array.from(relationships)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var relationship = _step.value;

            relationship.captionHeight = parseFloat(_this.style.forRelationship(relationship).get('font-size'));
            relationship.captionLength = _this.measureRelationshipCaption(relationship, relationship.caption);
            result.push(relationship.captionLayout = _this.captionFitsInsideArrowShaftWidth(relationship) && !relationship.isLoop() ? 'internal' : 'external');
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return result;
      }();
    }
  }, {
    key: 'shortenCaption',
    value: function shortenCaption(relationship, caption, targetWidth) {
      var shortCaption = caption || 'caption';
      while (true) {
        if (shortCaption.length <= 2) {
          return ['', 0];
        }
        shortCaption = shortCaption.substr(0, shortCaption.length - 2) + '\u2026';
        var width = this.measureRelationshipCaption(relationship, shortCaption);
        if (width < targetWidth) {
          return [shortCaption, width];
        }
      }
    }
  }, {
    key: 'computeGeometryForNonLoopArrows',
    value: function computeGeometryForNonLoopArrows(nodePairs) {
      var square = function square(distance) {
        return distance * distance;
      };
      return function () {
        var result = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = Array.from(nodePairs)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var nodePair = _step2.value;

            if (!nodePair.isLoop()) {
              var dx = nodePair.nodeA.x - nodePair.nodeB.x;
              var dy = nodePair.nodeA.y - nodePair.nodeB.y;
              var angle = (Math.atan2(dy, dx) / Math.PI * 180 + 360) % 360;
              var centreDistance = Math.sqrt(square(dx) + square(dy));
              result.push(function () {
                var result1 = [];
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = Array.from(nodePair.relationships)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var relationship = _step3.value;

                    relationship.naturalAngle = relationship.target === nodePair.nodeA ? (angle + 180) % 360 : angle;
                    result1.push(relationship.centreDistance = centreDistance);
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                      _iterator3.return();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }

                return result1;
              }());
            } else {
              result.push(undefined);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return result;
      }();
    }
  }, {
    key: 'distributeAnglesForLoopArrows',
    value: function distributeAnglesForLoopArrows(nodePairs, relationships) {
      return function () {
        var result = [];
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = Array.from(nodePairs)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var nodePair = _step4.value;

            if (nodePair.isLoop()) {
              var i, separation;
              var angles = [];
              var node = nodePair.nodeA;
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = Array.from(relationships)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var relationship = _step5.value;

                  if (!relationship.isLoop()) {
                    if (relationship.source === node) {
                      angles.push(relationship.naturalAngle);
                    }
                    if (relationship.target === node) {
                      angles.push(relationship.naturalAngle + 180);
                    }
                  }
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5.return) {
                    _iterator5.return();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              angles = angles.map(function (a) {
                return (a + 360) % 360;
              }).sort(function (a, b) {
                return a - b;
              });
              if (angles.length > 0) {
                var end, start;
                var biggestGap = {
                  start: 0,
                  end: 0
                };
                for (i = 0; i < angles.length; i++) {
                  var angle = angles[i];
                  start = angle;
                  end = i === angles.length - 1 ? angles[0] + 360 : angles[i + 1];
                  if (end - start > biggestGap.end - biggestGap.start) {
                    biggestGap.start = start;
                    biggestGap.end = end;
                  }
                }
                separation = (biggestGap.end - biggestGap.start) / (nodePair.relationships.length + 1);
                result.push(function () {
                  var result1 = [];
                  for (i = 0; i < nodePair.relationships.length; i++) {
                    relationship = nodePair.relationships[i];
                    result1.push(relationship.naturalAngle = (biggestGap.start + (i + 1) * separation - 90) % 360);
                  }
                  return result1;
                }());
              } else {
                separation = 360 / nodePair.relationships.length;
                result.push(function () {
                  var result2 = [];
                  for (i = 0; i < nodePair.relationships.length; i++) {
                    relationship = nodePair.relationships[i];
                    result2.push(relationship.naturalAngle = i * separation);
                  }
                  return result2;
                }());
              }
            } else {
              result.push(undefined);
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return result;
      }();
    }
  }, {
    key: 'layoutRelationships',
    value: function layoutRelationships(graph) {
      var _this2 = this;

      var nodePairs = graph.groupedRelationships();
      this.computeGeometryForNonLoopArrows(nodePairs);
      this.distributeAnglesForLoopArrows(nodePairs, graph.relationships());

      return function () {
        var result = [];
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = Array.from(nodePairs)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var nodePair = _step6.value;
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
              for (var _iterator7 = Array.from(nodePair.relationships)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var relationship = _step7.value;

                delete relationship.arrow;
              }
            } catch (err) {
              _didIteratorError7 = true;
              _iteratorError7 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                  _iterator7.return();
                }
              } finally {
                if (_didIteratorError7) {
                  throw _iteratorError7;
                }
              }
            }

            var middleRelationshipIndex = (nodePair.relationships.length - 1) / 2;
            var defaultDeflectionStep = 30;
            var maximumTotalDeflection = 150;
            var numberOfSteps = nodePair.relationships.length - 1;
            var totalDeflection = defaultDeflectionStep * numberOfSteps;

            var deflectionStep = totalDeflection > maximumTotalDeflection ? maximumTotalDeflection / numberOfSteps : defaultDeflectionStep;

            result.push(function () {
              var result1 = [];
              for (var i = 0; i < nodePair.relationships.length; i++) {
                var _Array$from, _Array$from2;

                var ref;
                relationship = nodePair.relationships[i];
                var shaftWidth = parseFloat(_this2.style.forRelationship(relationship).get('shaft-width')) || 2;
                var headWidth = shaftWidth + 6;
                var headHeight = headWidth;

                if (nodePair.isLoop()) {
                  relationship.arrow = new _loopArrow2.default(relationship.source.radius, 40, defaultDeflectionStep, shaftWidth, headWidth, headHeight, relationship.captionHeight);
                } else {
                  if (i === middleRelationshipIndex) {
                    relationship.arrow = new _straightArrow2.default(relationship.source.radius, relationship.target.radius, relationship.centreDistance, shaftWidth, headWidth, headHeight, relationship.captionLayout);
                  } else {
                    var deflection = deflectionStep * (i - middleRelationshipIndex);

                    if (nodePair.nodeA !== relationship.source) {
                      deflection *= -1;
                    }

                    relationship.arrow = new _arcArrow2.default(relationship.source.radius, relationship.target.radius, relationship.centreDistance, deflection, shaftWidth, headWidth, headHeight, relationship.captionLayout);
                  }
                }

                result1.push((_Array$from = Array.from(ref = relationship.arrow.shaftLength > relationship.captionLength ? [relationship.caption, relationship.captionLength] : _this2.shortenCaption(relationship, relationship.caption, relationship.arrow.shaftLength)), _Array$from2 = _slicedToArray(_Array$from, 2), relationship.shortCaption = _Array$from2[0], relationship.shortCaptionLength = _Array$from2[1], _Array$from), ref);
              }
              return result1;
            }());
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        return result;
      }();
    }
  }]);

  return PairwiseArcsRelationshipRouting;
}();

exports.default = PairwiseArcsRelationshipRouting;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AdjacentAngles = function () {
  function AdjacentAngles() {
    _classCallCheck(this, AdjacentAngles);
  }

  _createClass(AdjacentAngles, [{
    key: 'findRuns',
    value: function findRuns(AngleList, minSeparation) {
      var p = 0;
      var start = 0;
      var end = 0;
      var runs = [];
      var minStart = function minStart() {
        if (runs.length === 0) {
          return 0;
        } else {
          return runs[0].start;
        }
      };

      var scanForDensePair = function scanForDensePair() {
        start = p;
        end = AngleList.wrapIndex(p + 1);
        if (end === minStart()) {
          return 'done';
        } else {
          p = end;
          if (tooDense(start, end)) {
            return extendEnd;
          } else {
            return scanForDensePair;
          }
        }
      };

      var extendEnd = function extendEnd() {
        if (p === minStart()) {
          return 'done';
        } else if (tooDense(start, AngleList.wrapIndex(p + 1))) {
          end = AngleList.wrapIndex(p + 1);
          p = end;
          return extendEnd;
        } else {
          p = start;
          return extendStart;
        }
      };

      var extendStart = function extendStart() {
        var candidateStart = AngleList.wrapIndex(p - 1);
        if (tooDense(candidateStart, end) && candidateStart !== end) {
          start = candidateStart;
          p = start;
          return extendStart;
        } else {
          runs.push({
            start: start,
            end: end
          });
          p = end;
          return scanForDensePair;
        }
      };

      var tooDense = function tooDense(start, end) {
        var run = {
          start: start,
          end: end
        };
        return AngleList.angle(run) < AngleList.length(run) * minSeparation;
      };

      var stepCount = 0;
      var step = scanForDensePair;
      while (step !== 'done') {
        if (stepCount++ > AngleList.totalLength() * 10) {
          console.log('Warning: failed to layout arrows', function () {
            var result = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = Object.keys(AngleList.list || {})[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var key = _step.value;

                var value = AngleList.list[key];
                result.push(key + ': ' + value.angle);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return result;
          }().join('\n'), minSeparation);
          break;
        }
        step = step();
      }

      return runs;
    }
  }]);

  return AdjacentAngles;
}();

exports.default = AdjacentAngles;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _pairwiseArcsRelationshipRouting = require('../utils/pairwiseArcsRelationshipRouting');

var _pairwiseArcsRelationshipRouting2 = _interopRequireDefault(_pairwiseArcsRelationshipRouting);

var _textMeasurement = require('../utils/textMeasurement');

var _textMeasurement2 = _interopRequireDefault(_textMeasurement);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NeoD3Geometry = function () {
  function NeoD3Geometry(style) {
    _classCallCheck(this, NeoD3Geometry);

    this.style = style;
    this.relationshipRouting = new _pairwiseArcsRelationshipRouting2.default(this.style);
  }

  _createClass(NeoD3Geometry, [{
    key: 'formatNodeCaptions',
    value: function formatNodeCaptions(nodes) {
      var _this = this;

      return Array.from(nodes).map(function (node) {
        return node.caption = fitCaptionIntoCircle(node, _this.style);
      });
    }
  }, {
    key: 'formatRelationshipCaptions',
    value: function formatRelationshipCaptions(relationships) {
      var _this2 = this;

      return function () {
        var result = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Array.from(relationships)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var relationship = _step.value;

            var template = _this2.style.forRelationship(relationship).get('caption');
            result.push(relationship.caption = _this2.style.interpolate(template, relationship));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return result;
      }();
    }
  }, {
    key: 'setNodeRadii',
    value: function setNodeRadii(nodes) {
      var _this3 = this;

      return Array.from(nodes).map(function (node) {
        return node.radius = parseFloat(_this3.style.forNode(node).get('diameter')) / 2;
      });
    }
  }, {
    key: 'onGraphChange',
    value: function onGraphChange(graph) {
      this.setNodeRadii(graph.nodes());
      this.formatNodeCaptions(graph.nodes());
      this.formatRelationshipCaptions(graph.relationships());
      return this.relationshipRouting.measureRelationshipCaptions(graph.relationships());
    }
  }, {
    key: 'onTick',
    value: function onTick(graph) {
      return this.relationshipRouting.layoutRelationships(graph);
    }
  }]);

  return NeoD3Geometry;
}();

exports.default = NeoD3Geometry;


var square = function square(distance) {
  return distance * distance;
};
var addShortenedNextWord = function addShortenedNextWord(line, word, measure) {
  var result = [];
  while (!(word.length <= 2)) {
    word = word.substr(0, word.length - 2) + '\u2026';
    if (measure(word) < line.remainingWidth) {
      line.text += ' ' + word;
      break;
    } else {
      result.push(undefined);
    }
  }
  return result;
};
var noEmptyLines = function noEmptyLines(lines) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = Array.from(lines)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var line = _step2.value;

      if (line.text.length === 0) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return true;
};

var fitCaptionIntoCircle = function fitCaptionIntoCircle(node, style) {
  var template = style.forNode(node).get('caption');
  var captionText = style.interpolate(template, node);
  var fontFamily = 'sans-serif';
  var fontSize = parseFloat(style.forNode(node).get('font-size'));
  var lineHeight = fontSize;
  var measure = function measure(text) {
    return (0, _textMeasurement2.default)(text, fontFamily, fontSize);
  };

  var words = captionText.split(' ');

  var emptyLine = function emptyLine(lineCount, iLine) {
    var baseline = (1 + iLine - lineCount / 2) * lineHeight;
    if (style.forNode(node).get('icon-code')) {
      baseline = baseline + node.radius / 3;
    }
    var containingHeight = iLine < lineCount / 2 ? baseline - lineHeight : baseline;
    var lineWidth = Math.sqrt(square(node.radius) - square(containingHeight)) * 2;
    return {
      node: node,
      text: '',
      baseline: baseline,
      remainingWidth: lineWidth
    };
  };

  var fitOnFixedNumberOfLines = function fitOnFixedNumberOfLines(lineCount) {
    var lines = [];
    var iWord = 0;
    for (var iLine = 0, end = lineCount - 1, asc = end >= 0; asc ? iLine <= end : iLine >= end; asc ? iLine++ : iLine--) {
      var line = emptyLine(lineCount, iLine);
      while (iWord < words.length && measure(' ' + words[iWord]) < line.remainingWidth) {
        line.text += ' ' + words[iWord];
        line.remainingWidth -= measure(' ' + words[iWord]);
        iWord++;
      }
      lines.push(line);
    }
    if (iWord < words.length) {
      addShortenedNextWord(lines[lineCount - 1], words[iWord], measure);
    }
    return [lines, iWord];
  };

  var consumedWords = 0;
  var maxLines = node.radius * 2 / fontSize;

  var lines = [emptyLine(1, 0)];
  for (var lineCount = 1, end = maxLines, asc = end >= 1; asc ? lineCount <= end : lineCount >= end; asc ? lineCount++ : lineCount--) {
    var _Array$from = Array.from(fitOnFixedNumberOfLines(lineCount)),
        _Array$from2 = _slicedToArray(_Array$from, 2),
        candidateLines = _Array$from2[0],
        candidateWords = _Array$from2[1];

    if (noEmptyLines(candidateLines)) {
      ;
      var _Array$from3 = Array.from([candidateLines, candidateWords]);

      var _Array$from4 = _slicedToArray(_Array$from3, 2);

      lines = _Array$from4[0];
      consumedWords = _Array$from4[1];
    }
    if (consumedWords >= words.length) {
      return lines;
    }
  }
  return lines;
};
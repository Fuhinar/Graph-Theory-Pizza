"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Graph = function () {
  function Graph() {
    var _this = this;

    _classCallCheck(this, Graph);

    this.addExpandedNodes = function (node, nodes) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Array.from(nodes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var eNode = _step.value;

          if (_this.findNode(eNode.id) == null) {
            _this.nodeMap[eNode.id] = eNode;
            _this._nodes.push(eNode);
            _this.expandedNodeMap[node.id] = _this.expandedNodeMap[node.id] ? _this.expandedNodeMap[node.id].concat([eNode.id]) : [eNode.id];
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    };

    this.collapseNode = function (node) {
      if (!_this.expandedNodeMap[node.id]) {
        return;
      }
      _this.expandedNodeMap[node.id].forEach(function (id) {
        var eNode = _this.nodeMap[id];
        _this.collapseNode(eNode);
        _this.removeConnectedRelationships(eNode);
        _this.removeNode(eNode);
      });
      _this.expandedNodeMap[node.id] = [];
    };

    this.addNodes = this.addNodes.bind(this);
    this.removeNode = this.removeNode.bind(this);
    this.updateNode = this.updateNode.bind(this);
    this.removeConnectedRelationships = this.removeConnectedRelationships.bind(this);
    this.addRelationships = this.addRelationships.bind(this);
    this.addInternalRelationships = this.addInternalRelationships.bind(this);
    this.pruneInternalRelationships = this.pruneInternalRelationships.bind(this);
    this.findNode = this.findNode.bind(this);
    this.findNodeNeighbourIds = this.findNodeNeighbourIds.bind(this);
    this.findRelationship = this.findRelationship.bind(this);
    this.findAllRelationshipToNode = this.findAllRelationshipToNode.bind(this);
    this.nodeMap = {};
    this.expandedNodeMap = {};
    this._nodes = [];
    this.relationshipMap = {};
    this._relationships = [];
  }

  _createClass(Graph, [{
    key: "nodes",
    value: function nodes() {
      return this._nodes;
    }
  }, {
    key: "relationships",
    value: function relationships() {
      return this._relationships;
    }
  }, {
    key: "groupedRelationships",
    value: function groupedRelationships() {
      var groups = {};
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Array.from(this._relationships)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var relationship = _step2.value;

          var nodePair = new NodePair(relationship.source, relationship.target);
          nodePair = groups[nodePair] != null ? groups[nodePair] : nodePair;
          nodePair.relationships.push(relationship);
          groups[nodePair] = nodePair;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return function () {
        var result = [];
        for (var ignored in groups) {
          var pair = groups[ignored];
          result.push(pair);
        }
        return result;
      }();
    }
  }, {
    key: "addNodes",
    value: function addNodes(nodes) {
      // 213907  139543 215266  263854  215437 217079
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = Array.from(nodes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var node = _step3.value;

          if (this.findNode(node.id) == null) {
            this.nodeMap[node.id] = node;
            this._nodes = Object.values(this.nodeMap);
            // this._nodes.push(node)
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return this;
    }
  }, {
    key: "removeNode",
    value: function removeNode(node) {
      if (this.findNode(node.id) != null) {
        delete this.nodeMap[node.id];
        this._nodes.splice(this._nodes.indexOf(node), 1);
      }
      return this;
    }
  }, {
    key: "removeNodes",
    value: function removeNodes(nodes) {
      var _this2 = this;

      nodes.map(function (v) {
        _this2.removeNode(v);
      });
    }
  }, {
    key: "updateNode",
    value: function updateNode(node) {
      if (this.findNode(node.id) != null) {
        this.removeNode(node);
        node.expanded = false;
        node.minified = true;
        this.addNodes([node]);
      }
      return this;
    }
  }, {
    key: "updateNodes",
    value: function updateNodes(nodes) {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = Array.from(nodes)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var node = _step4.value;

          this.nodeMap[node.id] = node;
          this._nodes = Object.values(this.nodeMap);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      return this;
    }
  }, {
    key: "updateRelationships",
    value: function updateRelationships(relations) {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = Array.from(relations)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var r = _step5.value;

          this.relationshipMap[r.id] = r;
          this._relationships = Object.values(this.relationshipMap);
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return this;
    }
  }, {
    key: "removeConnectedRelationships",
    value: function removeConnectedRelationships(node) {
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = Array.from(this.findAllRelationshipToNode(node))[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var r = _step6.value;

          this.updateNode(r.source);
          this.updateNode(r.target);
          this._relationships.splice(this._relationships.indexOf(r), 1);
          delete this.relationshipMap[r.id];
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return this;
    }
  }, {
    key: "removeConnectedRelationshipss",
    value: function removeConnectedRelationshipss(nodes) {
      var _this3 = this;

      nodes.map(function (v) {
        _this3.removeConnectedRelationships(v);
      });
    }
  }, {
    key: "addRelationships",
    value: function addRelationships(relationships) {
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = Array.from(relationships)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var relationship = _step7.value;

          var existingRelationship = this.findRelationship(relationship.id);
          if (existingRelationship != null) {
            existingRelationship.internal = false;
          } else {
            relationship.internal = false;
            this.relationshipMap[relationship.id] = relationship;
            this._relationships.push(relationship);
          }
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      return this;
    }
  }, {
    key: "addInternalRelationships",
    value: function addInternalRelationships(relationships) {
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = Array.from(relationships)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var relationship = _step8.value;

          relationship.internal = true;
          if (this.findRelationship(relationship.id) == null) {
            this.relationshipMap[relationship.id] = relationship;
            this._relationships.push(relationship);
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return this;
    }
  }, {
    key: "pruneInternalRelationships",
    value: function pruneInternalRelationships() {
      var relationships = this._relationships.filter(function (relationship) {
        return !relationship.internal;
      });
      this.relationshipMap = {};
      this._relationships = [];
      return this.addRelationships(relationships);
    }
  }, {
    key: "findNode",
    value: function findNode(id) {
      return this.nodeMap[id];
    }
  }, {
    key: "findNodeNeighbourIds",
    value: function findNodeNeighbourIds(id) {
      return this._relationships.filter(function (relationship) {
        return relationship.source.id === id || relationship.target.id === id;
      }).map(function (relationship) {
        if (relationship.target.id === id) {
          return relationship.source.id;
        }
        return relationship.target.id;
      });
    }
  }, {
    key: "findRelationship",
    value: function findRelationship(id) {
      return this.relationshipMap[id];
    }
  }, {
    key: "findAllRelationshipToNode",
    value: function findAllRelationshipToNode(node) {
      return this._relationships.filter(function (relationship) {
        return relationship.source.id === node.id || relationship.target.id === node.id;
      });
    }
  }, {
    key: "resetGraph",
    value: function resetGraph() {
      this.nodeMap = {};
      this._nodes = [];
      this.relationshipMap = {};
      return this._relationships = [];
    }
  }]);

  return Graph;
}();

exports.default = Graph;

var NodePair = function () {
  function NodePair(node1, node2) {
    _classCallCheck(this, NodePair);

    this.relationships = [];
    if (node1.id < node2.id) {
      this.nodeA = node1;
      this.nodeB = node2;
    } else {
      this.nodeA = node2;
      this.nodeB = node1;
    }
  }

  _createClass(NodePair, [{
    key: "isLoop",
    value: function isLoop() {
      return this.nodeA === this.nodeB;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.nodeA.id + ":" + this.nodeB.id;
    }
  }]);

  return NodePair;
}();
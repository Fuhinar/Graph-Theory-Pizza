"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Relationship = function () {
  function Relationship(id, source, target, type, properties, className) {
    var _this = this;

    _classCallCheck(this, Relationship);

    this.isNode = false;
    this.isRelationship = true;

    this.id = id;
    this.source = source;
    this.target = target;
    this.type = type;
    this.className = className;
    this.propertyMap = properties;
    this.propertyList = function () {
      var result = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Object.keys(_this.propertyMap || {})[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          var value = _this.propertyMap[key];
          result.push({ key: key, value: value });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }();
  }

  _createClass(Relationship, [{
    key: "toJSON",
    value: function toJSON() {
      return this.propertyMap;
    }
  }, {
    key: "isLoop",
    value: function isLoop() {
      return this.source === this.target;
    }
  }]);

  return Relationship;
}();

exports.default = Relationship;
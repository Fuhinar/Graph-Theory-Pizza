'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _visualization = require('./visualization');

var _visualization2 = _interopRequireDefault(_visualization);

var _layout = require('./layout');

var _layout2 = _interopRequireDefault(_layout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var graphView = function () {
  function graphView(element, measureSize, graph, style) {
    _classCallCheck(this, graphView);

    this.graph = graph;
    this.style = style;
    // 这部分可以用来做布局切换的逻辑
    var forceLayout = _layout2.default.force();
    this.viz = (0, _visualization2.default)(element, measureSize, this.graph, forceLayout, this.style);
    this.callbacks = {};
    var callbacks = this.callbacks;

    this.viz.trigger = function () {
      return function (event) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        return Array.from(callbacks[event] || []).map(function (callback) {
          return callback.apply(null, args);
        });
      };
    }();
  }

  _createClass(graphView, [{
    key: 'on',
    value: function on(event, callback) {
      ;(this.callbacks[event] != null ? this.callbacks[event] : this.callbacks[event] = []).push(callback);
      return this;
    }
  }, {
    key: 'layout',
    value: function layout(value) {
      if (!arguments.length) {
        return this.layout;
      }
      this.layout = value;
      return this;
    }
  }, {
    key: 'grass',
    value: function grass(value) {
      if (!arguments.length) {
        return this.style.toSheet();
      }
      this.style.importGrass(value);
      return this;
    }
  }, {
    key: 'update',
    value: function update() {
      this.viz.update();
      return this;
    }
  }, {
    key: 'resize',
    value: function resize() {
      this.viz.resize();
      return this;
    }
  }, {
    key: 'boundingBox',
    value: function boundingBox() {
      return this.viz.boundingBox();
    }
  }, {
    key: 'collectStats',
    value: function collectStats() {
      return this.viz.collectStats();
    }
  }, {
    key: 'zoomIn',
    value: function zoomIn(elem) {
      return this.viz.zoomInClick(elem);
    }
  }, {
    key: 'zoomOut',
    value: function zoomOut(elem) {
      return this.viz.zoomOutClick(elem);
    }
  }]);

  return graphView;
}();

exports.default = graphView;
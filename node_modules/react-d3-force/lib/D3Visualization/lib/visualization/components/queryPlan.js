'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _d2 = require('d3');

var _d3 = _interopRequireDefault(_d2);

var _textMeasurement = require('../utils/textMeasurement');

var _textMeasurement2 = _interopRequireDefault(_textMeasurement);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function queryPlan(element) {
  var maxChildOperators = 2; // Fact we know about the cypher compiler
  var maxComparableRows = 1000000; // link widths are comparable between plans if all operators are below this row count
  var maxComparableDbHits = 1000000; // db hits are comparable between plans if all operators are below this db hit count

  var operatorWidth = 180;
  var operatorCornerRadius = 4;
  var operatorHeaderHeight = 18;
  var operatorHeaderFontSize = 11;
  var operatorDetailHeight = 14;
  var maxCostHeight = 50;
  var detailFontSize = 10;
  var operatorMargin = 50;
  var operatorPadding = 3;
  var rankMargin = 50;
  var margin = 10;
  var standardFont = "'Helvetica Neue',Helvetica,Arial,sans-serif";
  var fixedWidthFont = "Monaco,'Courier New',Terminal,monospace";
  var linkColor = '#DFE1E3';
  var costColor = '#F25A29';
  var dividerColor = '#DFE1E3';
  var operatorColors = ['#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'];

  var operatorCategories = {
    result: ['result'],
    seek: ['scan', 'seek', 'argument'],
    rows: ['limit', 'top', 'skip', 'sort', 'union', 'projection'],
    other: [],
    filter: ['select', 'filter', 'apply', 'distinct'],
    expand: ['expand', 'product', 'join', 'optional', 'path'],
    eager: ['eager']
  };

  var augment = function augment(color) {
    return {
      color: color,
      'border-color': _d3.default.rgb(color).darker(),
      'text-color-internal': _d3.default.hsl(color).l < 0.7 ? '#FFFFFF' : '#000000'
    };
  };

  var colors = _d3.default.scale.ordinal().domain(_d3.default.keys(operatorCategories)).range(operatorColors);

  var color = function color(d) {
    for (var name in operatorCategories) {
      var keywords = operatorCategories[name];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Array.from(keywords)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var keyword = _step.value;

          if (new RegExp(keyword, 'i').test(d)) {
            return augment(colors(name));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
    return augment(colors('other'));
  };

  var rows = function rows(operator) {
    var left = void 0;
    return (left = operator.Rows != null ? operator.Rows : operator.EstimatedRows) != null ? left : 0;
  };

  var plural = function plural(noun, count) {
    if (count === 1) {
      return noun;
    } else {
      return noun + 's';
    }
  };

  var formatNumber = _d3.default.format(',.0f');

  var operatorDetails = function operatorDetails(operator) {
    var expression = void 0,
        identifiers = void 0,
        index = void 0,
        left = void 0,
        left1 = void 0;
    if (!operator.expanded) {
      return [];
    }

    var details = [];

    var wordWrap = function wordWrap(string, className) {
      var measure = function measure(text) {
        return (0, _textMeasurement2.default)(text, fixedWidthFont, 10);
      };

      var words = string.split(/([^a-zA-Z\d])/);

      var firstWord = 0;
      var lastWord = 1;
      return function () {
        var result = [];
        while (firstWord < words.length) {
          while (lastWord < words.length && measure(words.slice(firstWord, lastWord + 1).join('')) < operatorWidth - operatorPadding * 2) {
            lastWord++;
          }
          details.push({
            className: className,
            value: words.slice(firstWord, lastWord).join('')
          });
          firstWord = lastWord;
          result.push(lastWord = firstWord + 1);
        }
        return result;
      }();
    };

    if (identifiers = operator.identifiers != null ? operator.identifiers : operator.KeyNames != null ? operator.KeyNames.split(', ') : undefined) {
      wordWrap(identifiers.filter(function (d) {
        return !/^ {2}/.test(d);
      }).join(', '), 'identifiers');
      details.push({ className: 'padding' });
    }

    if (index = operator.Index) {
      wordWrap(index, 'index');
      details.push({ className: 'padding' });
    }

    if (expression = (left = (left1 = operator.Expressions != null ? operator.Expressions : operator.Expression != null ? operator.Expression : operator.LegacyExpression != null ? operator.LegacyExpression : operator.ExpandExpression) != null ? left1 : operator.LabelName) != null ? left : operator.Signature) {
      wordWrap(expression, 'expression');
      details.push({ className: 'padding' });
    }

    if (operator.Order) {
      wordWrap('Ordered by ' + operator.Order, 'order');
      details.push({ className: 'padding' });
    }

    if (operator.PageCacheHits || operator.PageCacheMisses) {
      details.push({
        className: 'pagecache-hits',
        key: 'pagecache hits',
        value: formatNumber(operator.PageCacheHits)
      });
      details.push({
        className: 'pagecache-misses',
        key: 'pagecache misses',
        value: formatNumber(operator.PageCacheMisses)
      });
    }

    if (operator.Rows != null && operator.EstimatedRows != null) {
      details.push({
        className: 'estimated-rows',
        key: 'estimated rows',
        value: formatNumber(operator.EstimatedRows)
      });
    }
    if (operator.DbHits != null && !operator.alwaysShowCost) {
      details.push({
        className: 'db-hits',
        key: plural('db hit', operator.DbHits || 0),
        value: formatNumber(operator.DbHits || 0)
      });
    }

    if (details.length && details[details.length - 1].className === 'padding') {
      details.pop();
    }

    var y = operatorDetailHeight;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = Array.from(details)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var detail = _step2.value;

        detail.y = y;
        y += detail.className === 'padding' ? operatorPadding * 2 : operatorDetailHeight;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return details;
  };

  var transform = function transform(queryPlan) {
    var operators = [];
    var links = [];

    var result = {
      operatorType: 'Result',
      children: [queryPlan.root]
    };

    var collectLinks = function collectLinks(operator, rank) {
      operators.push(operator);
      operator.rank = rank;
      return function () {
        var result1 = [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = Array.from(operator.children)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var child = _step3.value;

            child.parent = operator;
            collectLinks(child, rank + 1);
            result1.push(links.push({
              source: child,
              target: operator
            }));
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return result1;
      }();
    };

    collectLinks(result, 0);

    return [operators, links];
  };

  var layout = function layout(operators, links) {
    var costHeight = function () {
      var scale = _d3.default.scale.log().domain([1, Math.max(_d3.default.max(operators, function (operator) {
        return operator.DbHits || 0;
      }), maxComparableDbHits)]).range([0, maxCostHeight]);
      return function (operator) {
        return scale((operator.DbHits != null ? operator.DbHits : 0) + 1);
      };
    }();

    var operatorHeight = function operatorHeight(operator) {
      var height = operatorHeaderHeight;
      if (operator.expanded) {
        height += operatorDetails(operator).slice(-1)[0].y + operatorPadding * 2;
      }
      height += costHeight(operator);
      return height;
    };

    var linkWidth = function () {
      var scale = _d3.default.scale.log().domain([1, Math.max(_d3.default.max(operators, function (operator) {
        return rows(operator) + 1;
      }), maxComparableRows)]).range([2, (operatorWidth - operatorCornerRadius * 2) / maxChildOperators]);
      return function (operator) {
        return scale(rows(operator) + 1);
      };
    }();

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = Array.from(operators)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var operator = _step4.value;

        operator.height = operatorHeight(operator);
        operator.costHeight = costHeight(operator);
        if (operator.costHeight > operatorDetailHeight + operatorPadding) {
          operator.alwaysShowCost = true;
        }
        var childrenWidth = _d3.default.sum(operator.children, linkWidth);
        var tx = (operatorWidth - childrenWidth) / 2;
        var _iteratorNormalCompletion13 = true;
        var _didIteratorError13 = false;
        var _iteratorError13 = undefined;

        try {
          for (var _iterator13 = Array.from(operator.children)[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
            var child = _step13.value;

            child.tx = tx;
            tx += linkWidth(child);
          }
        } catch (err) {
          _didIteratorError13 = true;
          _iteratorError13 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion13 && _iterator13.return) {
              _iterator13.return();
            }
          } finally {
            if (_didIteratorError13) {
              throw _iteratorError13;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = Array.from(links)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var link = _step5.value;

        link.width = linkWidth(link.source);
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    var ranks = _d3.default.nest().key(function (operator) {
      return operator.rank;
    }).entries(operators);

    var currentY = 0;

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = Array.from(ranks)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var rank = _step6.value;

        currentY -= _d3.default.max(rank.values, operatorHeight) + rankMargin;
        var _iteratorNormalCompletion14 = true;
        var _didIteratorError14 = false;
        var _iteratorError14 = undefined;

        try {
          for (var _iterator14 = Array.from(rank.values)[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
            operator = _step14.value;

            operator.x = 0;
            operator.y = currentY;
          }
        } catch (err) {
          _didIteratorError14 = true;
          _iteratorError14 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion14 && _iterator14.return) {
              _iterator14.return();
            }
          } finally {
            if (_didIteratorError14) {
              throw _iteratorError14;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }

    var width = _d3.default.max(ranks.map(function (rank) {
      return rank.values.length * (operatorWidth + operatorMargin);
    }));
    var height = -currentY;

    var collide = function collide() {
      return function () {
        var result = [];
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = Array.from(ranks)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            rank = _step7.value;

            var dx;
            var item = void 0;
            var x0 = 0;
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
              for (var _iterator8 = Array.from(rank.values)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                operator = _step8.value;

                dx = x0 - operator.x;
                if (dx > 0) {
                  operator.x += dx;
                }
                x0 = operator.x + operatorWidth + operatorMargin;
              }
            } catch (err) {
              _didIteratorError8 = true;
              _iteratorError8 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                  _iterator8.return();
                }
              } finally {
                if (_didIteratorError8) {
                  throw _iteratorError8;
                }
              }
            }

            dx = x0 - operatorMargin - width;
            if (dx > 0) {
              var lastOperator = rank.values[rank.values.length - 1];
              x0 = lastOperator.x -= dx;
              item = function () {
                var result1 = [];
                for (var i = rank.values.length - 2; i >= 0; i--) {
                  var item1 = void 0;
                  operator = rank.values[i];
                  dx = operator.x + operatorWidth + operatorMargin - x0;
                  if (dx > 0) {
                    operator.x -= operatorWidth;
                    item1 = x0 = operator.x;
                  }
                  result1.push(item1);
                }
                return result1;
              }();
            }
            result.push(item);
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }

        return result;
      }();
    };

    var center = function center(operator) {
      return operator.x + operatorWidth / 2;
    };

    var relaxUpwards = function relaxUpwards(alpha) {
      return function () {
        var result = [];
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = Array.from(ranks)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            rank = _step9.value;

            result.push(function () {
              var result1 = [];
              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = undefined;

              try {
                for (var _iterator10 = Array.from(rank.values)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  operator = _step10.value;

                  var item = void 0;
                  if (operator.children.length) {
                    var x = _d3.default.sum(operator.children, function (child) {
                      return linkWidth(child) * center(child);
                    }) / _d3.default.sum(operator.children, linkWidth);
                    item = operator.x += (x - center(operator)) * alpha;
                  }
                  result1.push(item);
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10.return) {
                    _iterator10.return();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }

              return result1;
            }());
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }

        return result;
      }();
    };

    var relaxDownwards = function relaxDownwards(alpha) {
      return function () {
        var result = [];
        var _iteratorNormalCompletion11 = true;
        var _didIteratorError11 = false;
        var _iteratorError11 = undefined;

        try {
          for (var _iterator11 = Array.from(ranks.slice().reverse())[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
            rank = _step11.value;

            result.push(function () {
              var result1 = [];
              var _iteratorNormalCompletion12 = true;
              var _didIteratorError12 = false;
              var _iteratorError12 = undefined;

              try {
                for (var _iterator12 = Array.from(rank.values)[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                  operator = _step12.value;

                  var item = void 0;
                  if (operator.parent) {
                    item = operator.x += (center(operator.parent) - center(operator)) * alpha;
                  }
                  result1.push(item);
                }
              } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion12 && _iterator12.return) {
                    _iterator12.return();
                  }
                } finally {
                  if (_didIteratorError12) {
                    throw _iteratorError12;
                  }
                }
              }

              return result1;
            }());
          }
        } catch (err) {
          _didIteratorError11 = true;
          _iteratorError11 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion11 && _iterator11.return) {
              _iterator11.return();
            }
          } finally {
            if (_didIteratorError11) {
              throw _iteratorError11;
            }
          }
        }

        return result;
      }();
    };

    collide();
    var iterations = 300;
    var alpha = 1;
    while (iterations--) {
      relaxUpwards(alpha);
      collide();
      relaxDownwards(alpha);
      collide();
      alpha *= 0.98;
    }

    width = _d3.default.max(operators, function (o) {
      return o.x;
    }) - _d3.default.min(operators, function (o) {
      return o.x;
    }) + operatorWidth;

    return [width, height];
  };

  var render = function render(operators, links, width, height, redisplay) {
    var svg = _d3.default.select(element);

    svg.transition().attr('width', width + margin * 2).attr('height', height + margin * 2).attr('viewBox', [_d3.default.min(operators, function (o) {
      return o.x;
    }) - margin, -margin - height, width + margin * 2, height + margin * 2].join(' '));

    var join = function join(parent, children) {
      return function () {
        var result = [];
        var _iteratorNormalCompletion15 = true;
        var _didIteratorError15 = false;
        var _iteratorError15 = undefined;

        try {
          for (var _iterator15 = Array.from(_d3.default.entries(children))[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
            var child = _step15.value;

            var item = void 0;
            var selection = parent.selectAll(child.key).data(child.value.data);
            child.value.selections(selection.enter(), selection, selection.exit());
            if (child.value.children) {
              item = join(selection, child.value.children);
            }
            result.push(item);
          }
        } catch (err) {
          _didIteratorError15 = true;
          _iteratorError15 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion15 && _iterator15.return) {
              _iterator15.return();
            }
          } finally {
            if (_didIteratorError15) {
              throw _iteratorError15;
            }
          }
        }

        return result;
      }();
    };

    return join(svg, {
      'g.layer.links': {
        data: [links],
        selections: function selections(enter) {
          return enter.append('g').attr('class', 'layer links');
        },

        children: {
          '.link': {
            data: function data(d) {
              return d;
            },
            selections: function selections(enter) {
              return enter.append('g').attr('class', 'link');
            },

            children: {
              path: {
                data: function data(d) {
                  return [d];
                },
                selections: function selections(enter, update) {
                  enter.append('path').attr('fill', linkColor);

                  return update.transition().attr('d', function (d) {
                    width = Math.max(1, d.width);
                    var sourceX = d.source.x + operatorWidth / 2;
                    var targetX = d.target.x + d.source.tx;

                    var sourceY = d.source.y + d.source.height;
                    var targetY = d.target.y;
                    var yi = _d3.default.interpolateNumber(sourceY, targetY);

                    var curvature = 0.5;
                    var control1 = yi(curvature);
                    var control2 = yi(1 - curvature);
                    var controlWidth = Math.min(width / Math.PI, (targetY - sourceY) / Math.PI);
                    if (sourceX > targetX + width / 2) {
                      controlWidth *= -1;
                    }

                    return ['M', sourceX + width / 2, sourceY, 'C', sourceX + width / 2, control1 - controlWidth, targetX + width, control2 - controlWidth, targetX + width, targetY, 'L', targetX, targetY, 'C', targetX, control2 + controlWidth, sourceX - width / 2, control1 + controlWidth, sourceX - width / 2, sourceY, 'Z'].join(' ');
                  });
                }
              },

              text: {
                data: function data(d) {
                  var x = d.source.x + operatorWidth / 2;
                  var y = d.source.y + d.source.height + operatorDetailHeight;
                  var source = d.source;

                  if (source.Rows != null || source.EstimatedRows != null) {
                    var _Array$from = Array.from(source.Rows != null ? ['Rows', 'row'] : ['EstimatedRows', 'estimated row']),
                        _Array$from2 = _slicedToArray(_Array$from, 2),
                        key = _Array$from2[0],
                        caption = _Array$from2[1];

                    return [{
                      x: x,
                      y: y,
                      text: formatNumber(source[key]) + '\xA0',
                      anchor: 'end'
                    }, {
                      x: x,
                      y: y,
                      text: plural(caption, source[key]),
                      anchor: 'start'
                    }];
                  } else {
                    return [];
                  }
                },
                selections: function selections(enter, update) {
                  enter.append('text').attr('font-size', detailFontSize).attr('font-family', standardFont);

                  return update.transition().attr('x', function (d) {
                    return d.x;
                  }).attr('y', function (d) {
                    return d.y;
                  }).attr('text-anchor', function (d) {
                    return d.anchor;
                  }).text(function (d) {
                    return d.text;
                  });
                }
              }
            }
          }
        }
      },

      'g.layer.operators': {
        data: [operators],
        selections: function selections(enter) {
          return enter.append('g').attr('class', 'layer operators');
        },

        children: {
          '.operator': {
            data: function data(d) {
              return d;
            },
            selections: function selections(enter, update) {
              enter.append('g').attr('class', 'operator');

              return update.transition().attr('transform', function (d) {
                return 'translate(' + d.x + ',' + d.y + ')';
              });
            },

            children: {
              'rect.background': {
                data: function data(d) {
                  return [d];
                },
                selections: function selections(enter, update) {
                  enter.append('rect').attr('class', 'background');

                  return update.transition().attr('width', operatorWidth).attr('height', function (d) {
                    return d.height;
                  }).attr('rx', operatorCornerRadius).attr('ry', operatorCornerRadius).attr('fill', 'white').style('stroke', 'none');
                }
              },

              'g.header': {
                data: function data(d) {
                  return [d];
                },
                selections: function selections(enter) {
                  return enter.append('g').attr('class', 'header').attr('pointer-events', 'all').on('click', function (d) {
                    d.expanded = !d.expanded;
                    return redisplay();
                  });
                },

                children: {
                  'path.banner': {
                    data: function data(d) {
                      return [d];
                    },
                    selections: function selections(enter, update) {
                      enter.append('path').attr('class', 'banner');

                      return update.attr('d', function (d) {
                        var shaving = d.height <= operatorHeaderHeight ? operatorCornerRadius : d.height < operatorHeaderHeight + operatorCornerRadius ? operatorCornerRadius - Math.sqrt(Math.pow(operatorCornerRadius, 2) - Math.pow(operatorCornerRadius - d.height + operatorHeaderHeight, 2)) : 0;
                        return ['M', operatorWidth - operatorCornerRadius, 0, 'A', operatorCornerRadius, operatorCornerRadius, 0, 0, 1, operatorWidth, operatorCornerRadius, 'L', operatorWidth, operatorHeaderHeight - operatorCornerRadius, 'A', operatorCornerRadius, operatorCornerRadius, 0, 0, 1, operatorWidth - shaving, operatorHeaderHeight, 'L', shaving, operatorHeaderHeight, 'A', operatorCornerRadius, operatorCornerRadius, 0, 0, 1, 0, operatorHeaderHeight - operatorCornerRadius, 'L', 0, operatorCornerRadius, 'A', operatorCornerRadius, operatorCornerRadius, 0, 0, 1, operatorCornerRadius, 0, 'Z'].join(' ');
                      }).style('fill', function (d) {
                        return color(d.operatorType).color;
                      });
                    }
                  },

                  'path.expand': {
                    data: function data(d) {
                      if (d.operatorType === 'Result') {
                        return [];
                      } else {
                        return [d];
                      }
                    },
                    selections: function selections(enter, update) {
                      var rotateForExpand = function rotateForExpand(d) {
                        _d3.default.transform();
                        return 'translate(' + operatorHeaderHeight / 2 + ', ' + operatorHeaderHeight / 2 + ') ' + ('rotate(' + (d.expanded ? 90 : 0) + ') ') + 'scale(0.5)';
                      };

                      enter.append('path').attr('class', 'expand').attr('fill', function (d) {
                        return color(d.operatorType)['text-color-internal'];
                      }).attr('d', 'M -5 -10 L 8.66 0 L -5 10 Z').attr('transform', rotateForExpand);

                      return update.transition().attrTween('transform', function (d, i, a) {
                        return _d3.default.interpolateString(a, rotateForExpand(d));
                      });
                    }
                  },

                  'text.title': {
                    data: function data(d) {
                      return [d];
                    },
                    selections: function selections(enter) {
                      return enter.append('text').attr('class', 'title').attr('font-size', operatorHeaderFontSize).attr('font-family', standardFont).attr('x', operatorHeaderHeight).attr('y', 13).attr('fill', function (d) {
                        return color(d.operatorType)['text-color-internal'];
                      }).text(function (d) {
                        return d.operatorType;
                      });
                    }
                  }
                }
              },

              'g.detail': {
                data: operatorDetails,
                selections: function selections(enter, update, exit) {
                  enter.append('g');

                  update.attr('class', function (d) {
                    return 'detail ' + d.className;
                  }).attr('transform', function (d) {
                    return 'translate(0, ' + (operatorHeaderHeight + d.y) + ')';
                  }).attr('font-family', function (d) {
                    if (d.className === 'expression' || d.className === 'identifiers') {
                      return fixedWidthFont;
                    } else {
                      return standardFont;
                    }
                  });

                  return exit.remove();
                },

                children: {
                  text: {
                    data: function data(d) {
                      if (d.key) {
                        return [{
                          text: d.value + '\xA0',
                          anchor: 'end',
                          x: operatorWidth / 2
                        }, { text: d.key, anchor: 'start', x: operatorWidth / 2 }];
                      } else {
                        return [{ text: d.value, anchor: 'start', x: operatorPadding }];
                      }
                    },
                    selections: function selections(enter, update, exit) {
                      enter.append('text').attr('font-size', detailFontSize);

                      update.attr('x', function (d) {
                        return d.x;
                      }).attr('text-anchor', function (d) {
                        return d.anchor;
                      }).attr('fill', 'black').transition().each('end', function () {
                        return update.text(function (d) {
                          return d.text;
                        });
                      });

                      return exit.remove();
                    }
                  },

                  'path.divider': {
                    data: function data(d) {
                      if (d.className === 'padding') {
                        return [d];
                      } else {
                        return [];
                      }
                    },
                    selections: function selections(enter, update) {
                      enter.append('path').attr('class', 'divider').attr('visibility', 'hidden');

                      return update.attr('d', ['M', 0, -operatorPadding * 2, 'L', operatorWidth, -operatorPadding * 2].join(' ')).attr('stroke', dividerColor).transition().each('end', function () {
                        return update.attr('visibility', 'visible');
                      });
                    }
                  }
                }
              },

              'path.cost': {
                data: function data(d) {
                  return [d];
                },
                selections: function selections(enter, update) {
                  enter.append('path').attr('class', 'cost').attr('fill', costColor);

                  return update.transition().attr('d', function (d) {
                    if (d.costHeight < operatorCornerRadius) {
                      var shaving = operatorCornerRadius - Math.sqrt(Math.pow(operatorCornerRadius, 2) - Math.pow(operatorCornerRadius - d.costHeight, 2));
                      return ['M', operatorWidth - shaving, d.height - d.costHeight, 'A', operatorCornerRadius, operatorCornerRadius, 0, 0, 1, operatorWidth - operatorCornerRadius, d.height, 'L', operatorCornerRadius, d.height, 'A', operatorCornerRadius, operatorCornerRadius, 0, 0, 1, shaving, d.height - d.costHeight, 'Z'].join(' ');
                    } else {
                      return ['M', 0, d.height - d.costHeight, 'L', operatorWidth, d.height - d.costHeight, 'L', operatorWidth, d.height - operatorCornerRadius, 'A', operatorCornerRadius, operatorCornerRadius, 0, 0, 1, operatorWidth - operatorCornerRadius, d.height, 'L', operatorCornerRadius, d.height, 'A', operatorCornerRadius, operatorCornerRadius, 0, 0, 1, 0, d.height - operatorCornerRadius, 'Z'].join(' ');
                    }
                  });
                }
              },

              'text.cost': {
                data: function data(d) {
                  if (d.alwaysShowCost) {
                    var y = d.height - d.costHeight + operatorDetailHeight;
                    return [{
                      text: formatNumber(d.DbHits) + '\xA0',
                      anchor: 'end',
                      y: y
                    }, { text: 'db hits', anchor: 'start', y: y }];
                  } else {
                    return [];
                  }
                },
                selections: function selections(enter, update) {
                  enter.append('text').attr('class', 'cost').attr('font-size', detailFontSize).attr('font-family', standardFont).attr('fill', 'white');

                  return update.attr('x', operatorWidth / 2).attr('text-anchor', function (d) {
                    return d.anchor;
                  }).transition().attr('y', function (d) {
                    return d.y;
                  }).each('end', function () {
                    return update.text(function (d) {
                      return d.text;
                    });
                  });
                }
              },

              'rect.outline': {
                data: function data(d) {
                  return [d];
                },
                selections: function selections(enter, update) {
                  enter.append('rect').attr('class', 'outline');

                  return update.transition().attr('width', operatorWidth).attr('height', function (d) {
                    return d.height;
                  }).attr('rx', operatorCornerRadius).attr('ry', operatorCornerRadius).attr('fill', 'none').attr('stroke-width', 1).style('stroke', function (d) {
                    return color(d.operatorType)['border-color'];
                  });
                }
              }
            }
          }
        }
      }
    });
  };

  var display = function display(queryPlan) {
    var _Array$from3 = Array.from(transform(queryPlan)),
        _Array$from4 = _slicedToArray(_Array$from3, 2),
        operators = _Array$from4[0],
        links = _Array$from4[1];

    var _Array$from5 = Array.from(layout(operators, links)),
        _Array$from6 = _slicedToArray(_Array$from5, 2),
        width = _Array$from6[0],
        height = _Array$from6[1];

    return render(operators, links, width, height, function () {
      return display(queryPlan);
    });
  };
  this.display = display;
  return this;
}

exports.default = queryPlan;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rightMenu = undefined;

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _renderer = require('../components/renderer');

var _renderer2 = _interopRequireDefault(_renderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noop = function noop() {};

// 获取选中的node
var getRightClickedNode = function getRightClickedNode(node) {
  if (node.rightClicked) {
    return [node];
  } else {
    return [];
  }
};

var attachContextEvent = function attachContextEvent(event, elems, viz, content) {
  return function () {
    var result = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Array.from(elems)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var elem = _step.value;

        elem.on('mousedown.drag', function () {
          _d2.default.event.stopPropagation();
          return null;
        });
        elem.on('mouseup', function (node) {
          return viz.trigger(event, node);
        });
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  }();
};

var createMenuItem = function createMenuItem(selection, viz, eventName, itemNumber, className, text) {
  var g = selection.selectAll('.right-menu.' + className);
  g.remove();
  var g1 = selection.selectAll('.right-menu.' + className).data(getRightClickedNode).enter().append('g').classed(className, true).classed('right-menu', true);
  var rec = g1.append('rect').attr({
    width: 100,
    height: 20,
    fill: 'white',
    stroke: '#e8e8e8',
    'stroke-width': 1
  });
  var txt = g1.append('text').text(text).classed('right-menu-text', true).attr({
    x: 10,
    y: 10
  });

  g1.attr({
    transform: 'translate(40,' + 20 * itemNumber + ')'
  });
  attachContextEvent(eventName, [rec, txt], viz, text);

  return;
};

var donutClearNode = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'clearSelected', 0, 'clear_selected', '清除选择');
  },


  onTick: noop
});
var donutContraryNode = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'contrarySelected', 1, 'contrary_selected', '反选');
  },


  onTick: noop
});

var donutBackStatus = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'backStatus', 2, 'back_status', '上一步');
  },


  onTick: noop
});
var donutInitStatus = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'initStatus', 3, 'init_status', '初始化');
  },

  onTick: noop
});
var donutStartFrame = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'startFrame', 3, 'start_frame', '播放动画');
  },

  onTick: noop
});

var rightMenu = [];

rightMenu.push(donutClearNode);
rightMenu.push(donutContraryNode);
rightMenu.push(donutBackStatus);
rightMenu.push(donutInitStatus);
rightMenu.push(donutStartFrame);

exports.rightMenu = rightMenu;
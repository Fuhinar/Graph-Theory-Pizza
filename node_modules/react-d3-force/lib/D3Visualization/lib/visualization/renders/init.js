'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.relationship = exports.node = undefined;

var _renderer = require('../components/renderer');

var _renderer2 = _interopRequireDefault(_renderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noop = function noop() {};

var nodeRingStrokeSize = 8;

var nodeDefs = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    var defs = selection.selectAll('defs.img').data(function (node) {
      return [node];
    });
    defs.enter().append('defs').append('pattern').classed('pattern', true).attr({
      patternContentUnits: 'objectBoundingBox',
      id: 'avatar',
      width: '100%',
      height: '100%'
    }).append('image').attr({
      'height': 1,
      'width': 1,
      'xlink:href': 'http://userimg.yingyonghui.com/head/24/1458708838143/5426424.png-thumb'
    });

    return defs.exit().remove();
  },

  onTick: noop

});

var nodeOutline = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    var circles = selection.selectAll('circle.outline').data(function (node) {
      return [node];
    });

    circles.enter().append('circle').classed('outline', true).attr({
      cx: 0,
      cy: 0
    });
    circles.attr({
      r: function r(node) {
        return node.radius;
      },
      fill: function fill(node) {
        if (/[frame|rootNode1|rootNode2]/.test(node.className)) {
          return 'url(#avatar)';
        }
        return viz.style.forNode(node).get('color');
      },
      stroke: function stroke(node) {
        return viz.style.forNode(node).get('border-color');
      },
      'stroke-width': function strokeWidth(node) {
        return viz.style.forNode(node).get('border-width');
      }
    });

    return circles.exit().remove();
  },

  onTick: noop
});

var nodeCaption = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    var text = selection.selectAll('text.caption').data(function (node) {
      return node.caption;
    });

    text.enter().append('text')
    // .classed('caption', true)
    .attr({ 'text-anchor': 'middle' }).attr({ 'pointer-events': 'none' });

    text.text(function (line) {
      return (/[frame|rootNode1|rootNode2]/.test(line.node.className) ? '' : line.text
      );
    }).attr('y', function (line) {
      return line.baseline;
    }).attr('font-size', function (line) {
      return viz.style.forNode(line.node).get('font-size');
    }).attr({
      fill: function fill(line) {
        return viz.style.forNode(line.node).get('text-color-internal');
      }
    });

    return text.exit().remove();
  },


  onTick: noop
});

var nodeIcon = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    var text = selection.selectAll('text').data(function (node) {
      return node.caption;
    });

    text.enter().append('text').attr({ 'text-anchor': 'middle' }).attr({ 'pointer-events': 'none' }).attr({ 'font-family': 'streamline' });

    text.text(function (line) {
      return viz.style.forNode(line.node).get('icon-code');
    }).attr('dy', function (line) {
      return line.node.radius / 16;
    }).attr('font-size', function (line) {
      return line.node.radius;
    }).attr({
      fill: function fill(line) {
        return viz.style.forNode(line.node).get('text-color-internal');
      }
    });

    return text.exit().remove();
  },


  onTick: noop
});

var nodeRing = new _renderer2.default({
  onGraphChange: function onGraphChange(selection) {
    var circles = selection.selectAll('circle.ring').data(function (node) {
      return [node];
    });
    circles.enter().insert('circle', '.outline').classed('ring', true).attr({
      cx: 0,
      cy: 0,
      'stroke-width': nodeRingStrokeSize + 'px'
    });

    circles.attr({
      r: function r(node) {
        return node.radius + 4;
      }
    });

    return circles.exit().remove();
  },


  onTick: noop
});

var arrowPath = new _renderer2.default({
  name: 'arrowPath',
  onGraphChange: function onGraphChange(selection, viz) {
    var paths = selection.selectAll('path.outline').data(function (rel) {
      return [rel];
    });

    paths.enter().append('path').classed('outline', true);

    paths.attr('fill', function (rel) {
      return viz.style.forRelationship(rel).get('color');
    }).attr('stroke', 'none');

    return paths.exit().remove();
  },
  onTick: function onTick(selection) {
    return selection.selectAll('path').attr('d', function (d) {
      return d.arrow.outline(d.shortCaptionLength);
    });
  }
});

var relationshipType = new _renderer2.default({
  name: 'relationshipType',
  onGraphChange: function onGraphChange(selection, viz) {
    var texts = selection.selectAll('text').data(function (rel) {
      return [rel];
    });

    texts.enter().append('text').attr({ 'text-anchor': 'middle' }).attr({ 'pointer-events': 'none' });

    texts.attr('font-size', function (rel) {
      return viz.style.forRelationship(rel).get('font-size');
    }).attr('fill', function (rel) {
      return viz.style.forRelationship(rel).get('text-color-' + rel.captionLayout);
    });

    return texts.exit().remove();
  },
  onTick: function onTick(selection, viz) {
    return selection.selectAll('text').attr('x', function (rel) {
      return rel.arrow.midShaftPoint.x;
    }).attr('y', function (rel) {
      return rel.arrow.midShaftPoint.y + parseFloat(viz.style.forRelationship(rel).get('font-size')) / 2 - 1;
    }).attr('transform', function (rel) {
      if (rel.naturalAngle < 90 || rel.naturalAngle > 270) {
        return 'rotate(180 ' + rel.arrow.midShaftPoint.x + ' ' + rel.arrow.midShaftPoint.y + ')';
      } else {
        return null;
      }
    }).text(function (rel) {
      return rel.shortCaption;
    });
  }
});

var relationshipOverlay = new _renderer2.default({
  name: 'relationshipOverlay',
  onGraphChange: function onGraphChange(selection) {
    var rects = selection.selectAll('path.overlay').data(function (rel) {
      return [rel];
    });

    rects.enter().append('path').classed('overlay', true);

    return rects.exit().remove();
  },
  onTick: function onTick(selection) {
    var band = 16;

    return selection.selectAll('path.overlay').attr('d', function (d) {
      return d.arrow.overlay(band);
    });
  }
});

var node = [];
node.push(nodeOutline);
node.push(nodeIcon);
node.push(nodeCaption);
node.push(nodeRing);
node.push(nodeDefs);

var relationship = [];
relationship.push(arrowPath);
relationship.push(relationshipType);
relationship.push(relationshipOverlay);

exports.node = node;
exports.relationship = relationship;
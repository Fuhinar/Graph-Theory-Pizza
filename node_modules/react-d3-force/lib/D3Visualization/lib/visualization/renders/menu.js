'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.menu = undefined;

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _renderer = require('../components/renderer');

var _renderer2 = _interopRequireDefault(_renderer);

var _icons = require('../renders/icons');

var _icons2 = _interopRequireDefault(_icons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noop = function noop() {};

// TODO:
var numberOfItemsInContextMenu = 6;

var arc = function arc(radius, itemNumber, width) {
  if (width == null) {
    width = 30;
  }
  itemNumber = itemNumber - 1;
  var startAngle = 2 * Math.PI / numberOfItemsInContextMenu * itemNumber;
  var endAngle = startAngle + 2 * Math.PI / numberOfItemsInContextMenu;
  var innerRadius = Math.max(radius + 8, 20);
  return _d2.default.svg.arc().innerRadius(innerRadius).outerRadius(innerRadius + width).startAngle(startAngle).endAngle(endAngle).padAngle(0.03);
};
// 获取选中的node
var getSelectedNode = function getSelectedNode(node) {
  if (node.selected) {
    return [node];
  } else {
    return [];
  }
};

var attachContextEvent = function attachContextEvent(event, elems, viz, content, label) {
  return function () {
    var result = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Array.from(elems)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var elem = _step.value;

        elem.on('mousedown.drag', function () {
          _d2.default.event.stopPropagation();
          return null;
        });
        elem.on('mouseup', function (node) {
          return viz.trigger(event, node);
        });
        elem.on('mouseover', function (node) {
          node.contextMenu = {
            menuSelection: event,
            menuContent: content,
            label: label
          };
          return viz.trigger('menuMouseOver', node);
        });
        result.push(elem.on('mouseout', function (node) {
          delete node.contextMenu;
          return viz.trigger('menuMouseOut', node);
        }));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  }();
};

var createMenuItem = function createMenuItem(selection, viz, eventName, itemNumber, className, position, textValue, helpValue) {
  var path = selection.selectAll('path.' + className).data(getSelectedNode);
  var iconPath = selection.selectAll('.icon.' + className).data(getSelectedNode);

  var tab = path.enter().append('path').classed(className, true).classed('context-menu-item', true).attr({
    d: function d(node) {
      return arc(node.radius, itemNumber, 1)();
    }
  });

  var rawSvgIcon = _icons2.default[textValue];
  // console.log(icons);
  // console.log(rawSvgIcon)
  var icon = iconPath.enter().appendSVG(rawSvgIcon).classed(className, true).classed('context-menu-item', true).attr({
    transform: function transform(node) {
      return 'translate(' + Math.floor(arc(node.radius, itemNumber).centroid()[0] + position[0] * 100 / 100) + ',' + Math.floor(arc(node.radius, itemNumber).centroid()[1] + position[1] * 100 / 100) + ')' + ' ' + 'scale(0.7)';
    },
    color: function color(node) {
      return viz.style.forNode(node).get('text-color-internal');
    },
    fill: function fill(node) {
      return viz.style.forNode(node).get('text-color-internal');
    }
  });
  attachContextEvent(eventName, [tab, icon], viz, helpValue, rawSvgIcon);

  tab.transition().duration(200).attr({
    d: function d(node) {
      return arc(node.radius, itemNumber)();
    }
  });

  path.exit().transition().duration(200).attr({
    d: function d(node) {
      return arc(node.radius, itemNumber, 1)();
    }
  }).remove();

  return iconPath.exit().remove();
};

var donutRemoveNode = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'nodeClose', 1, 'remove_node', [-8, -8], 'Remove', 'Dismiss');
  },


  onTick: noop
});

var donutExpandNode = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'nodeDblClicked', 2, 'expand_node', [-8, -8], 'Expand / Collapse', 'Expand / Collapse child relationships');
  },


  onTick: noop
});

var donutUnlockNode = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'nodeUnlock', 3, 'unlock_node', [-8, -6], 'Unlock', 'Unlock the node to re-layout the graph');
  },


  onTick: noop
});

var donutDeleteNode = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'nodeDelete', 4, 'delete_node', [-10, -12], 'Delete', 'delete node');
  },

  onTick: noop

});

var donutNewNode = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'nodeNew', 5, 'new_node', [-9, -9], 'New', 'new node');
  },

  onTick: noop

});

var donutEditNode = new _renderer2.default({
  onGraphChange: function onGraphChange(selection, viz) {
    return createMenuItem(selection, viz, 'nodeEdit', 6, 'edit_node', [-6, -6], 'Edit', 'edit node');
  },

  onTick: noop

});

var menu = [];

menu.push(donutExpandNode);
menu.push(donutRemoveNode);
menu.push(donutUnlockNode);
menu.push(donutDeleteNode);
menu.push(donutNewNode);
menu.push(donutEditNode);

exports.menu = menu;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGraph = createGraph;
exports.mapNodes = mapNodes;
exports.mapRelationships = mapRelationships;
exports.getGraphStats = getGraphStats;

var _utils = require('../shared/services/utils');

var _graph = require('./lib/visualization/components/graph');

var _graph2 = _interopRequireDefault(_graph);

var _node = require('./lib/visualization/components/node');

var _node2 = _interopRequireDefault(_node);

var _relationship = require('./lib/visualization/components/relationship');

var _relationship2 = _interopRequireDefault(_relationship);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var mapProperties = function mapProperties(_) {
  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(stringifyValues(_))));
};
var stringifyValues = function stringifyValues(obj) {
  return Object.keys(obj).map(function (k) {
    return _defineProperty({}, k, (0, _utils.optionalToString)(obj[k]));
  });
};

function createGraph(nodes, relationships) {
  var graph = new _graph2.default();
  graph.addNodes(mapNodes(nodes));
  graph.addRelationships(mapRelationships(relationships, graph));
  graph.display = { initialNodeDisplay: 300, nodeCount: 1 };
  return graph;
}

function mapNodes(nodes) {
  return nodes.map(function (node) {
    return new _node2.default(node.id, node.labels, mapProperties(node.properties), node.className || '');
  });
}

function mapRelationships(relationships, graph) {
  return relationships.map(function (rel) {
    var source = graph.findNode(rel.startNodeId);
    var target = graph.findNode(rel.endNodeId);
    return new _relationship2.default(rel.id, source, target, rel.type, mapProperties(rel.properties), rel.className);
  });
}

function getGraphStats(graph) {
  var labelStats = {};
  var relTypeStats = {};
  graph.nodes().forEach(function (node) {
    node.labels.forEach(function (label) {
      if (labelStats['*']) {
        labelStats['*'].count = labelStats['*'].count + 1;
      } else {
        labelStats['*'] = {
          count: 1,
          properties: []
        };
      }
      if (labelStats[label]) {
        labelStats[label].count = labelStats[label].count + 1;
        labelStats[label].properties = Object.assign({}, labelStats[label].properties, node.propertyMap);
      } else {
        labelStats[label] = {
          count: 1,
          properties: node.propertyMap
        };
      }
    });
  });
  graph.relationships().forEach(function (rel) {
    if (relTypeStats['*']) {
      relTypeStats['*'].count = relTypeStats['*'].count + 1;
    } else {
      relTypeStats['*'] = {
        count: 1,
        properties: []
      };
    }
    if (relTypeStats[rel.type]) {
      relTypeStats[rel.type].count = relTypeStats[rel.type].count + 1;
      relTypeStats[rel.type].properties = Object.assign({}, relTypeStats[rel.type].properties, rel.propertyMap);
    } else {
      relTypeStats[rel.type] = {
        count: 1,
        properties: rel.propertyMap
      };
    }
  });
  return { labels: labelStats, relTypes: relTypeStats };
}
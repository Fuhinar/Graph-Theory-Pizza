'use strict';

var _graphStyle = require('./graphStyle');

var _graphStyle2 = _interopRequireDefault(_graphStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('grass', function () {
  it('can generate a default style', function () {
    // Given
    var grass = new _graphStyle2.default();

    // When
    var styleStr = grass.toString();

    // Then
    expect(styleStr).toEqual('node {\n  diameter: 50px;\n  color: #A5ABB6;\n  border-color: #9AA1AC;\n  border-width: 2px;\n  text-color-internal: #FFFFFF;\n  font-size: 10px;\n}\n\nrelationship {\n  color: #A5ABB6;\n  shaft-width: 1px;\n  font-size: 8px;\n  padding: 3px;\n  text-color-external: #000000;\n  text-color-internal: #FFFFFF;\n  caption: \'<type>\';\n}\n\n');
  });
  it('can generate a style for a node with a simple label', function () {
    // Given
    var grass = new _graphStyle2.default();
    var node = {
      labels: ['foo']

      // When
    };grass.forNode(node);
    var styleStr = grass.toString();

    // Then
    expect(styleStr).toEqual('node {\n  diameter: 50px;\n  color: #A5ABB6;\n  border-color: #9AA1AC;\n  border-width: 2px;\n  text-color-internal: #FFFFFF;\n  font-size: 10px;\n}\n\nrelationship {\n  color: #A5ABB6;\n  shaft-width: 1px;\n  font-size: 8px;\n  padding: 3px;\n  text-color-external: #000000;\n  text-color-internal: #FFFFFF;\n  caption: \'<type>\';\n}\n\nnode.foo {\n  color: #C990C0;\n  border-color: #b261a5;\n  text-color-internal: #FFFFFF;\n  defaultCaption: <id>;\n}\n\n');
  });
  it('can generate a style for a node with a label with a dot', function () {
    // Given
    var grass = new _graphStyle2.default();
    var node = {
      labels: ['foo.bar']

      // When
    };grass.forNode(node);
    var styleStr = grass.toString();

    // Then
    expect(styleStr).toEqual('node {\n  diameter: 50px;\n  color: #A5ABB6;\n  border-color: #9AA1AC;\n  border-width: 2px;\n  text-color-internal: #FFFFFF;\n  font-size: 10px;\n}\n\nrelationship {\n  color: #A5ABB6;\n  shaft-width: 1px;\n  font-size: 8px;\n  padding: 3px;\n  text-color-external: #000000;\n  text-color-internal: #FFFFFF;\n  caption: \'<type>\';\n}\n\nnode.foo\\.bar {\n  color: #C990C0;\n  border-color: #b261a5;\n  text-color-internal: #FFFFFF;\n  defaultCaption: <id>;\n}\n\n');
  });
  it('can generate a style for a relationship with a type with a dot', function () {
    // Given
    var grass = new _graphStyle2.default();

    // When
    grass.loadRules();
    grass.changeForSelector('relationship.REL\\.TYPE', {
      caption: 'yo'
    });
    // grass.forRelationship(rel)
    var styleStr = grass.toString();

    // Then
    expect(styleStr).toEqual('node {\n  diameter: 50px;\n  color: #A5ABB6;\n  border-color: #9AA1AC;\n  border-width: 2px;\n  text-color-internal: #FFFFFF;\n  font-size: 10px;\n}\n\nrelationship {\n  color: #A5ABB6;\n  shaft-width: 1px;\n  font-size: 8px;\n  padding: 3px;\n  text-color-external: #000000;\n  text-color-internal: #FFFFFF;\n  caption: \'<type>\';\n}\n\nrelationship.REL\\.TYPE {\n  caption: \'yo\';\n}\n\n');
  });
});
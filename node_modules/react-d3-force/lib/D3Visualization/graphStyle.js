"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = neoGraphStyle;

var _grassUtils = require("../shared/services/grassUtils");

function neoGraphStyle() {
  // 修改默认的样式
  var defaultStyle = { "node": { "diameter": "10px", "color": "#57C7E3", "border-color": "#23b3d7", "border-width": "2px", "text-color-internal": "#FFFFFF", "font-size": "10px" }, "relationship": { "color": "#A5ABB6", "shaft-width": "1px", "font-size": "8px", "padding": "3px", "text-color-external": "#000000", "text-color-internal": "#FFFFFF", "caption": "<type>" }, "node.*": { "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF", "defaultCaption": "<id>" }, "node.Block123": { "color": "#F16667", "border-color": "#eb2728", "text-color-internal": "#FFFFFF", "defaultCaption": "<id>", "caption": "{name}" }, "node.Icomarks": { "defaultCaption": "<id>" }, "node.Messari": { "color": "#ECB5C9", "border-color": "#da7298", "text-color-internal": "#604A0E", "defaultCaption": "<id>", "caption": "{name}" }, "node.Organization": { "color": "#8DCC93", "border-color": "#5db665", "text-color-internal": "#604A0E", "defaultCaption": "<id>", "diameter": "65px" }, "node.Project": { "color": "#4C8EDA", "border-color": "#2870c2", "text-color-internal": "#FFFFFF", "defaultCaption": "<id>", "diameter": "65px", "caption": "{name}" }, "node.Sector": { "color": "#DA7194", "border-color": "#cc3c6c", "text-color-internal": "#FFFFFF", "defaultCaption": "<id>", "diameter": "80px" }, "node.Capital": { "color": "#57C7E3", "border-color": "#23b3d7", "text-color-internal": "#FFFFFF", "defaultCaption": "<id>", "diameter": "65px" }, "node.Twitter": { "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF", "defaultCaption": "<id>", "diameter": "10px" }, "node.Token": { "color": "#F79767", "border-color": "#f36924", "text-color-internal": "#FFFFFF", "defaultCaption": "<id>", "diameter": "50px" }, "node.Person": { "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF", "defaultCaption": "<id>", "caption": "{name}", "diameter": "50px" }, "node.Facebook": { "defaultCaption": "<id>", "diameter": "10px", "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF" }, "node.Github": { "defaultCaption": "<id>", "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF", "diameter": "20px" }, "node.Instagram": { "defaultCaption": "<id>", "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF", "diameter": "10px" }, "node.Linkedin": { "defaultCaption": "<id>", "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF", "diameter": "10px" }, "node.Medium": { "defaultCaption": "<id>", "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF", "diameter": "10px" }, "node.Pencil": { "defaultCaption": "<id>", "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF", "diameter": "10px" }, "node.Tech": { "defaultCaption": "<id>", "color": "#D9C8AE", "border-color": "#c0a378", "text-color-internal": "#604A0E" }, "node.Website": { "defaultCaption": "<id>", "color": "#D9C8AE", "border-color": "#c0a378", "text-color-internal": "#604A0E", "diameter": "10px" }, "node.Whitepaper": { "defaultCaption": "<id>", "color": "#D9C8AE", "border-color": "#c0a378", "text-color-internal": "#604A0E", "diameter": "10px" }, "node.Wikipedia": { "defaultCaption": "<id>", "diameter": "10px" }, "node.Youtube": { "defaultCaption": "<id>", "color": "#C990C0", "border-color": "#b261a5", "text-color-internal": "#FFFFFF", "diameter": "10px" } };
  var defaultSizes = [{
    diameter: '10px'
  }, {
    diameter: '20px'
  }, {
    diameter: '50px'
  }, {
    diameter: '65px'
  }, {
    diameter: '80px'
  }];
  var defaultIconCodes = [{
    'icon-code': 'a'
  }, {
    'icon-code': '"'
  }, {
    'icon-code': 'z'
  }, {
    'icon-code': '_'
  }, {
    'icon-code': '/'
  }, {
    'icon-code': '>'
  }, {
    'icon-code': 'k'
  }];
  var defaultArrayWidths = [{
    'shaft-width': '1px'
  }, {
    'shaft-width': '2px'
  }, {
    'shaft-width': '3px'
  }, {
    'shaft-width': '5px'
  }, {
    'shaft-width': '8px'
  }, {
    'shaft-width': '13px'
  }, {
    'shaft-width': '25px'
  }, {
    'shaft-width': '38px'
  }];
  var defaultColors = [{
    color: '#FFE081',
    'border-color': '#9AA1AC',
    'text-color-internal': '#FFFFFF'
  }, {
    color: '#C990C0',
    'border-color': '#b261a5',
    'text-color-internal': '#FFFFFF'
  }, {
    color: '#F79767',
    'border-color': '#f36924',
    'text-color-internal': '#FFFFFF'
  }, {
    color: '#57C7E3',
    'border-color': '#23b3d7',
    'text-color-internal': '#FFFFFF'
  }, {
    color: '#F16667',
    'border-color': '#eb2728',
    'text-color-internal': '#FFFFFF'
  }, {
    color: '#D9C8AE',
    'border-color': '#c0a378',
    'text-color-internal': '#604A0E'
  }, {
    color: '#8DCC93',
    'border-color': '#5db665',
    'text-color-internal': '#604A0E'
  }, {
    color: '#ECB5C9',
    'border-color': '#da7298',
    'text-color-internal': '#604A0E'
  }, {
    color: '#4C8EDA',
    'border-color': '#2870c2',
    'text-color-internal': '#FFFFFF'
  }, {
    color: '#FFC454',
    'border-color': '#d7a013',
    'text-color-internal': '#604A0E'
  }, {
    color: '#DA7194',
    'border-color': '#cc3c6c',
    'text-color-internal': '#FFFFFF'
  }, {
    color: '#569480',
    'border-color': '#447666',
    'text-color-internal': '#FFFFFF'
  }];
  var Selector = function () {
    function Selector(tag1, classes1) {
      this.tag = tag1;
      this.classes = classes1 != null ? classes1 : [];
    }

    Selector.prototype.toString = function () {
      return (0, _grassUtils.selectorArrayToString)([this.tag].concat(this.classes));
    };

    return Selector;
  }();

  var StyleRule = function () {
    function StyleRule(selector1, props1) {
      this.selector = selector1;
      this.props = props1;
    }

    StyleRule.prototype.matches = function (selector) {
      if (this.selector.tag !== selector.tag) {
        return false;
      }
      for (var i = 0; i < this.selector.classes.length; i++) {
        var classs = this.selector.classes[i];
        if (classs != null && selector.classes.indexOf(classs) === -1) {
          return false;
        }
      }
      return true;
    };

    StyleRule.prototype.matchesExact = function (selector) {
      return this.matches(selector) && this.selector.classes.length === selector.classes.length;
    };

    return StyleRule;
  }();

  var StyleElement = function () {
    function StyleElement(selector) {
      this.selector = selector;
      this.props = {};
    }

    StyleElement.prototype.applyRules = function (rules) {
      for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];
        if (rule.matches(this.selector)) {
          this.props = _extends({}, this.props, rule.props);
          this.props.caption = this.props.caption || this.props.defaultCaption;
        }
      }
      return this;
    };

    StyleElement.prototype.get = function (attr) {
      return this.props[attr] || '';
    };

    return StyleElement;
  }();

  var GraphStyle = function () {
    function GraphStyle() {
      this.rules = [];
      try {
        this.loadRules();
      } catch (_error) {
        // e = _error
      }
    }

    var parseSelector = function parseSelector(key) {
      var tokens = (0, _grassUtils.selectorStringToArray)(key);
      return new Selector(tokens[0], tokens.slice(1));
    };

    var selector = function selector(item) {
      if (item.isNode) {
        return nodeSelector(item);
      } else if (item.isRelationship) {
        return relationshipSelector(item);
      }
    };

    var nodeSelector = function nodeSelector(node) {
      node = node || {};
      var classes = node.labels != null ? node.labels : [];
      return new Selector('node', classes);
    };

    var relationshipSelector = function relationshipSelector(rel) {
      rel = rel || {};
      var classes = rel.type != null ? [rel.type] : [];
      return new Selector('relationship', classes);
    };

    var findRule = function findRule(selector, rules) {
      for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];
        if (rule.matchesExact(selector)) {
          return rule;
        }
      }
    };

    var findAvailableDefaultColor = function findAvailableDefaultColor(rules) {
      var usedColors = rules.filter(function (rule) {
        return rule.props.color != null;
      }).map(function (rule) {
        return rule.props.color;
      });
      var index = usedColors.length - 1 > defaultColors ? 0 : usedColors.length - 1;
      return defaultColors[index];
    };

    var getDefaultNodeCaption = function getDefaultNodeCaption(item) {
      if (!item || !(item.propertyList != null ? item.propertyList.length : 0) > 0) {
        return {
          defaultCaption: '<id>'
        };
      }
      var captionPrioOrder = [/^name$/i, /^title$/i, /^label$/i, /name$/i, /description$/i, /^.+/];
      var defaultCaption = captionPrioOrder.reduceRight(function (leading, current) {
        var hits = item.propertyList.filter(function (prop) {
          return current.test(prop.key);
        });
        if (hits.length) {
          return '{' + hits[0].key + '}';
        } else {
          return leading;
        }
      }, '');
      defaultCaption || (defaultCaption = '<id>');
      return {
        caption: defaultCaption
      };
    };

    GraphStyle.prototype.calculateStyle = function (selector) {
      return new StyleElement(selector).applyRules(this.rules);
    };

    GraphStyle.prototype.forEntity = function (item) {
      return this.calculateStyle(selector(item));
    };

    GraphStyle.prototype.setDefaultNodeStyling = function (selector, item) {
      var defaultColor = true;
      var defaultCaption = true;
      for (var i = 0; i < this.rules.length; i++) {
        var rule = this.rules[i];
        if (rule.selector.classes.length > 0 && rule.matches(selector)) {
          if (rule.props.hasOwnProperty('color')) {
            defaultColor = false;
          }
          if (rule.props.hasOwnProperty('caption')) {
            defaultCaption = false;
          }
        }
      }
      var minimalSelector = new Selector(selector.tag, selector.classes.sort().slice(0, 1));
      if (defaultColor) {
        this.changeForSelector(minimalSelector, findAvailableDefaultColor(this.rules));
      }
      if (defaultCaption) {
        return this.changeForSelector(minimalSelector, getDefaultNodeCaption(item));
      }
    };

    GraphStyle.prototype.changeForSelector = function (selector, props) {
      var rule = findRule(selector, this.rules);
      if (rule == null) {
        rule = new StyleRule(selector, props);
        this.rules.push(rule);
      }
      rule.props = _extends({}, rule.props, props);
      return rule;
    };

    GraphStyle.prototype.destroyRule = function (rule) {
      var idx = this.rules.indexOf(rule);
      if (idx != null) {
        this.rules.splice(idx, 1);
      }
    };

    GraphStyle.prototype.importGrass = function (string) {
      try {
        var rules = this.parse(string);
        return this.loadRules(rules);
      } catch (_error) {
        // e = _error
      }
    };

    GraphStyle.prototype.parse = function (string) {
      var chars = string.split('');
      var insideString = false;
      var insideProps = false;
      var keyword = '';
      var props = '';
      var rules = {};
      for (var i = 0; i < chars.length; i++) {
        var c = chars[i];
        var skipThis = true;
        switch (c) {
          case '{':
            if (!insideString) {
              insideProps = true;
            } else {
              skipThis = false;
            }
            break;
          case '}':
            if (!insideString) {
              insideProps = false;
              rules[keyword] = props;
              keyword = '';
              props = '';
            } else {
              skipThis = false;
            }
            break;
          case "'":
            insideString ^= true;
            break;
          default:
            skipThis = false;
        }
        if (skipThis) {
          continue;
        }
        if (insideProps) {
          props += c;
        } else {
          if (!c.match(/[\s\n]/)) {
            keyword += c;
          }
        }
      }

      var _loop = function _loop(k) {
        var v = rules[k];
        rules[k] = {};
        v.split(';').forEach(function (prop) {
          var _prop$split = prop.split(':'),
              _prop$split2 = _slicedToArray(_prop$split, 2),
              key = _prop$split2[0],
              val = _prop$split2[1];

          if (key && val) {
            rules[k][key.trim()] = val.trim();
          }
        });
      };

      for (var k in rules) {
        _loop(k);
      }
      return rules;
    };

    GraphStyle.prototype.resetToDefault = function () {
      this.loadRules();
      return true;
    };

    GraphStyle.prototype.toSheet = function () {
      var sheet = {};
      this.rules.forEach(function (rule) {
        sheet[rule.selector.toString()] = rule.props;
      });
      return sheet;
    };

    GraphStyle.prototype.toString = function () {
      var str = '';
      this.rules.forEach(function (r) {
        str += r.selector.toString() + ' {\n';
        for (var k in r.props) {
          var v = r.props[k];
          if (k === 'caption') {
            v = "'" + v + "'";
          }
          str += '  ' + k + ': ' + v + ';\n';
        }
        str += '}\n\n';
      });
      return str;
    };

    GraphStyle.prototype.loadRules = function (data) {
      if ((typeof data === "undefined" ? "undefined" : _typeof(data)) !== 'object') {
        data = defaultStyle;
      }
      this.rules.length = 0;
      for (var key in data) {
        var props = data[key];
        this.rules.push(new StyleRule(parseSelector(key), props));
      }
      return this;
    };

    GraphStyle.prototype.defaultSizes = function () {
      return defaultSizes;
    };

    GraphStyle.prototype.defaultIconCodes = function () {
      return defaultIconCodes;
    };

    GraphStyle.prototype.defaultArrayWidths = function () {
      return defaultArrayWidths;
    };

    GraphStyle.prototype.defaultColors = function () {
      return defaultColors;
    };

    GraphStyle.prototype.interpolate = function (str, item) {
      var ips = str.replace(/\{([^{}]*)\}/g, function (a, b) {
        var r = item.propertyMap[b];
        if ((typeof r === "undefined" ? "undefined" : _typeof(r)) === 'object') {
          return r.join(', ');
        }
        if (typeof r === 'string' || typeof r === 'number') {
          return r;
        }
        return '';
      });
      if (ips.length < 1 && str === '{type}' && item.isRelationship) {
        ips = '<type>';
      }
      if (ips.length < 1 && str === '{id}' && item.isNode) {
        ips = '<id>';
      }
      return ips.replace(/^<(id|type)>$/, function (a, b) {
        var r = item[b];
        if (typeof r === 'string' || typeof r === 'number') {
          return r;
        }
        return '';
      });
    };

    GraphStyle.prototype.forNode = function (node) {
      node = node || {};
      var selector = nodeSelector(node);
      if ((node.labels != null ? node.labels.length : 0) > 0) {
        this.setDefaultNodeStyling(selector, node);
      }
      return this.calculateStyle(selector);
    };

    GraphStyle.prototype.forRelationship = function (rel) {
      var selector = relationshipSelector(rel);
      return this.calculateStyle(selector);
    };

    return GraphStyle;
  }();
  return new GraphStyle();
}
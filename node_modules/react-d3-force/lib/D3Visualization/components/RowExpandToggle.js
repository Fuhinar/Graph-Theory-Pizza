'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RowExpandToggleComponent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styled = require('./styled');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getHeightFromElem = function getHeightFromElem(rowElem) {
  return rowElem && rowElem ? rowElem.clientHeight : 0;
};

var RowExpandToggleComponent = exports.RowExpandToggleComponent = function (_Component) {
  _inherits(RowExpandToggleComponent, _Component);

  function RowExpandToggleComponent(props) {
    _classCallCheck(this, RowExpandToggleComponent);

    var _this = _possibleConstructorReturn(this, (RowExpandToggleComponent.__proto__ || Object.getPrototypeOf(RowExpandToggleComponent)).call(this, props));

    _this.updateDimensions = function () {
      _this.setState({ rowHeight: getHeightFromElem(_this.props.rowElem) });
    };

    _this.state = {};
    return _this;
  }

  _createClass(RowExpandToggleComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateDimensions();
      window.addEventListener('resize', this.updateDimensions);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.updateDimensions);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      var rowHeight = getHeightFromElem(this.props.rowElem);
      if (this.state.rowHeight !== rowHeight) {
        this.updateDimensions();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.containerHeight * 1.1 < this.state.rowHeight) {
        return _react2.default.createElement(
          _styled.StyledRowToggle,
          { onClick: this.props.onClick },
          _react2.default.createElement(_styled.StyledCaret, {
            className: this.props.contracted ? 'fa fa-caret-left' : 'fa fa-caret-down'
          })
        );
      } else {
        return null;
      }
    }
  }]);

  return RowExpandToggleComponent;
}(_react.Component);
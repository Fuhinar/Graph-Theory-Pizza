'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GrassEditorComponent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _graphStyle = require('../graphStyle');

var _graphStyle2 = _interopRequireDefault(_graphStyle);

var _styled = require('./styled');

var _utils = require('../../shared/services/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GrassEditorComponent = exports.GrassEditorComponent = function (_Component) {
  _inherits(GrassEditorComponent, _Component);

  function GrassEditorComponent(props) {
    _classCallCheck(this, GrassEditorComponent);

    var _this = _possibleConstructorReturn(this, (GrassEditorComponent.__proto__ || Object.getPrototypeOf(GrassEditorComponent)).call(this, props));

    _this.graphStyle = (0, _graphStyle2.default)();
    if (_this.props.graphStyleData) {
      _this.graphStyle.loadRules(_this.props.graphStyleData);
    }
    _this.nodeDisplaySizes = [];
    _this.widths = [];
    for (var index = 0; index < 10; index++) {
      _this.nodeDisplaySizes.push(12 + 2 * index + 'px');
      _this.widths.push(5 + 3 * index + 'px');
    }
    return _this;
  }

  _createClass(GrassEditorComponent, [{
    key: 'sizeLessThan',
    value: function sizeLessThan(size1, size2) {
      var size1Numerical = size1 ? size1.replace('px', '') + 0 : 0;
      var size2Numerical = size1 ? size2.replace('px', '') + 0 : 0;
      return size1Numerical <= size2Numerical;
    }
  }, {
    key: 'updateStyle',
    value: function updateStyle(selector, styleProp) {
      this.graphStyle.changeForSelector(selector, styleProp);
      this.props.update(this.graphStyle.toSheet());
    }
  }, {
    key: 'circleSelector',
    value: function circleSelector(styleProps, styleProvider, activeProvider, className, selector) {
      var _this2 = this;

      var textProvider = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {
        return '';
      };

      return styleProps.map(function (styleProp, i) {
        var onClick = function onClick() {
          _this2.updateStyle(selector, styleProp);
        };
        var style = styleProvider(styleProp, i);
        var text = textProvider(styleProp);
        var active = activeProvider(styleProp);
        return _react2.default.createElement(
          _styled.StyledPickerListItem,
          {
            className: className,
            key: (0, _utils.toKeyString)('circle' + i)
          },
          _react2.default.createElement(
            _styled.StyledCircleSelector,
            {
              className: active ? 'active' : '',
              style: style,
              onClick: onClick
            },
            text
          )
        );
      });
    }
  }, {
    key: 'colorPicker',
    value: function colorPicker(selector, styleForLabel) {
      return _react2.default.createElement(
        _styled.StyledInlineListItem,
        { key: 'color-picker' },
        _react2.default.createElement(
          _styled.StyledInlineList,
          { className: 'color-picker picker' },
          _react2.default.createElement(
            _styled.StyledInlineListItem,
            null,
            'Color:'
          ),
          this.circleSelector(this.graphStyle.defaultColors(), function (color) {
            return { backgroundColor: color.color };
          }, function (color) {
            return color.color === styleForLabel.get('color');
          }, 'color-picker-item', selector)
        )
      );
    }
  }, {
    key: 'sizePicker',
    value: function sizePicker(selector, styleForLabel) {
      var _this3 = this;

      return _react2.default.createElement(
        _styled.StyledInlineListItem,
        { key: 'size-picker' },
        _react2.default.createElement(
          _styled.StyledInlineList,
          { className: 'size-picker picker' },
          _react2.default.createElement(
            _styled.StyledInlineListItem,
            null,
            'Size:'
          ),
          this.circleSelector(this.graphStyle.defaultSizes(), function (size, index) {
            return {
              width: _this3.nodeDisplaySizes[index],
              height: _this3.nodeDisplaySizes[index]
            };
          }, function (size) {
            return _this3.sizeLessThan(size.diameter, styleForLabel.get('diameter'));
          }, 'size-picker-item', selector)
        )
      );
    }
  }, {
    key: 'widthPicker',
    value: function widthPicker(selector, styleForItem) {
      var _this4 = this;

      var widthSelectors = this.graphStyle.defaultArrayWidths().map(function (widthValue, i) {
        var onClick = function onClick() {
          _this4.updateStyle(selector, widthValue);
        };
        var style = { width: _this4.widths[i] };
        var active = styleForItem.get('shaft-width') === widthValue['shaft-width'];
        return _react2.default.createElement(
          _styled.StyledPickerListItem,
          {
            className: 'width-picker-item',
            key: (0, _utils.toKeyString)('width' + i)
          },
          _react2.default.createElement(_styled.StyledPickerSelector, {
            className: active ? 'active' : '',
            style: style,
            onClick: onClick
          })
        );
      });
      return _react2.default.createElement(
        _styled.StyledInlineListItem,
        { key: 'width-picker' },
        _react2.default.createElement(
          _styled.StyledInlineList,
          { className: 'width-picker picker' },
          _react2.default.createElement(
            _styled.StyledInlineListItem,
            null,
            'Line width:'
          ),
          widthSelectors
        )
      );
    }
  }, {
    key: 'iconPicker',
    value: function iconPicker(selector) {
      return _react2.default.createElement(
        'li',
        { key: 'icon-picker' },
        'Icon:',
        _react2.default.createElement(
          'ul',
          { className: 'icon-picker picker' },
          this.picker(this.graphStyle.defaultIconCodes(), function (iconCode) {
            return { fontFamily: 'streamline' };
          }, 'icon-picker-item', selector, function (iconCode) {
            return iconCode['icon-code'];
          })
        )
      );
    }
  }, {
    key: 'captionPicker',
    value: function captionPicker(selector, styleForItem, propertyKeys) {
      var _this5 = this;

      var showTypeSelector = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      var captionSelector = function captionSelector(displayCaption, captionToSave, key) {
        var onClick = function onClick() {
          _this5.updateStyle(selector, { caption: captionToSave });
        };
        var active = styleForItem.props.caption === captionToSave;
        return _react2.default.createElement(
          _styled.StyledPickerListItem,
          { key: (0, _utils.toKeyString)('caption' + displayCaption) },
          _react2.default.createElement(
            _styled.StyledCaptionSelector,
            {
              className: active ? 'active' : '',
              onClick: onClick
            },
            displayCaption
          )
        );
      };
      var captionSelectors = propertyKeys.map(function (propKey, i) {
        return captionSelector(propKey, '{' + propKey + '}');
      });
      var typeCaptionSelector = null;
      if (showTypeSelector) {
        typeCaptionSelector = captionSelector('<type>', '<type>', 'typecaption');
      }
      return _react2.default.createElement(
        _styled.StyledInlineListItem,
        { key: 'caption-picker' },
        _react2.default.createElement(
          _styled.StyledInlineList,
          { className: 'caption-picker picker' },
          _react2.default.createElement(
            _styled.StyledInlineListItem,
            null,
            'Caption:'
          ),
          captionSelector('<id>', '<id>', 'idcaption'),
          typeCaptionSelector,
          captionSelectors
        )
      );
    }
  }, {
    key: 'stylePicker',
    value: function stylePicker() {
      var pickers = void 0;
      var title = void 0;
      if (this.props.selectedLabel) {
        var labelList = this.props.selectedLabel.label !== '*' ? [this.props.selectedLabel.label] : [];
        var styleForLabel = this.graphStyle.forNode({ labels: labelList });
        var inlineStyle = {
          backgroundColor: styleForLabel.get('color'),
          color: styleForLabel.get('text-color-internal')
        };
        pickers = [this.colorPicker(styleForLabel.selector, styleForLabel), this.sizePicker(styleForLabel.selector, styleForLabel), this.captionPicker(styleForLabel.selector, styleForLabel, this.props.selectedLabel.propertyKeys)];
        title = _react2.default.createElement(
          _styled.StyledLabelToken,
          { className: 'token token-label', style: inlineStyle },
          this.props.selectedLabel.label || '*'
        );
      } else if (this.props.selectedRelType) {
        var relTypeSelector = this.props.selectedRelType.relType !== '*' ? { type: this.props.selectedRelType.relType } : {};
        var styleForRelType = this.graphStyle.forRelationship(relTypeSelector);
        var _inlineStyle = {
          backgroundColor: styleForRelType.get('color'),
          color: styleForRelType.get('text-color-internal')
        };
        pickers = [this.colorPicker(styleForRelType.selector, styleForRelType), this.widthPicker(styleForRelType.selector, styleForRelType), this.captionPicker(styleForRelType.selector, styleForRelType, this.props.selectedRelType.propertyKeys, true)];
        title = _react2.default.createElement(
          _styled.StyledTokenRelationshipType,
          {
            className: 'token token-relationship',
            style: _inlineStyle
          },
          this.props.selectedRelType.relType || '*'
        );
      } else {
        return null;
      }
      return _react2.default.createElement(
        _styled.StyledInlineList,
        { className: 'style-picker' },
        title,
        pickers
      );
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.graphStyleData && nextProps.graphStyleData !== this.props.graphStyleData) {
        this.graphStyle.loadRules(nextProps.graphStyleData);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.stylePicker();
    }
  }]);

  return GrassEditorComponent;
}(_react.Component);

exports.default = GrassEditorComponent;
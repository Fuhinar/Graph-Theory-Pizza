'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InspectorComponent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('../../shared/services/utils');

var _reactSvgInline = require('react-svg-inline');

var _reactSvgInline2 = _interopRequireDefault(_reactSvgInline);

var _styled = require('./styled');

var _GrassEditor = require('./GrassEditor');

var _GrassEditor2 = _interopRequireDefault(_GrassEditor);

var _RowExpandToggle = require('./RowExpandToggle');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mapItemProperties = function mapItemProperties(itemProperties) {
  return itemProperties.sort(function (_ref, _ref2) {
    var keyA = _ref.key;
    var keyB = _ref2.key;
    return keyA < keyB ? -1 : keyA === keyB ? 0 : 1;
  }).map(function (prop, i) {
    return _react2.default.createElement(
      _styled.StyledInspectorFooterRowListPair,
      { className: 'pair', key: 'prop' + i },
      _react2.default.createElement(
        _styled.StyledInspectorFooterRowListKey,
        { className: 'key' },
        prop.key + ': '
      ),
      _react2.default.createElement(
        _styled.StyledInspectorFooterRowListValue,
        { className: 'value' },
        (0, _utils.optionalToString)(prop.value)
      )
    );
  });
};

var mapLabels = function mapLabels(graphStyle, itemLabels) {
  return itemLabels.map(function (label, i) {
    var graphStyleForLabel = graphStyle.forNode({ labels: [label] });
    var style = {
      backgroundColor: graphStyleForLabel.get('color'),
      color: graphStyleForLabel.get('text-color-internal')
    };
    return _react2.default.createElement(
      _styled.StyledLabelToken,
      {
        key: 'label' + i,
        style: style,
        className: 'token' + ' ' + 'token-label'
      },
      label
    );
  });
};

var InspectorComponent = exports.InspectorComponent = function (_Component) {
  _inherits(InspectorComponent, _Component);

  function InspectorComponent(props) {
    _classCallCheck(this, InspectorComponent);

    var _this = _possibleConstructorReturn(this, (InspectorComponent.__proto__ || Object.getPrototypeOf(InspectorComponent)).call(this, props));

    _this.state = {
      contracted: true,
      graphStyle: props.graphStyle
    };
    return _this;
  }

  _createClass(InspectorComponent, [{
    key: 'setFooterRowELem',
    value: function setFooterRowELem(elem) {
      if (elem) {
        this.footerRowElem = elem;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var item = void 0;
      var type = void 0;
      var inspectorContent = void 0;

      if (this.props.hoveredItem && this.props.hoveredItem.type !== 'canvas') {
        item = this.props.hoveredItem.item;
        type = this.props.hoveredItem.type;
      } else if (this.props.selectedItem) {
        item = this.props.selectedItem.item;
        type = this.props.selectedItem.type;
      } else if (this.props.hoveredItem) {
        // Canvas
        item = this.props.hoveredItem.item;
        type = this.props.hoveredItem.type;
      }
      if (item && type) {
        if (type === 'legend-item') {
          inspectorContent = _react2.default.createElement(_GrassEditor2.default, {
            selectedLabel: item.selectedLabel,
            selectedRelType: item.selectedRelType
          });
        }
        if (type === 'status-item') {
          inspectorContent = _react2.default.createElement(
            _styled.StyledInspectorFooterStatusMessage,
            { className: 'value' },
            item
          );
        }
        if (type === 'context-menu-item') {
          inspectorContent = _react2.default.createElement(
            _styled.StyledInlineList,
            { className: 'list-inline' },
            _react2.default.createElement(
              _styled.StyledTokenContextMenuKey,
              {
                key: 'token',
                className: 'token' + ' ' + 'token-context-menu-key' + ' ' + 'token-label'
              },
              _react2.default.createElement(_reactSvgInline2.default, { svg: item.label, width: '12' })
            ),
            _react2.default.createElement(
              _styled.StyledInspectorFooterRowListPair,
              { key: 'pair', className: 'pair' },
              _react2.default.createElement(
                _styled.StyledInspectorFooterRowListValue,
                { className: 'value' },
                item.content
              )
            )
          );
        } else if (type === 'canvas') {
          var description = 'Displaying ' + item.nodeCount + ' nodes, ' + item.relationshipCount + ' relationships.';
          inspectorContent = _react2.default.createElement(
            _styled.StyledInlineList,
            { className: 'list-inline' },
            _react2.default.createElement(
              _styled.StyledInspectorFooterRowListPair,
              { className: 'pair', key: 'pair' },
              _react2.default.createElement(
                _styled.StyledInspectorFooterRowListValue,
                { className: 'value' },
                description
              )
            )
          );
        } else if (type === 'node') {
          inspectorContent = _react2.default.createElement(
            _styled.StyledInlineList,
            { className: 'list-inline' },
            mapLabels(this.state.graphStyle, item.labels),
            _react2.default.createElement(
              _styled.StyledInspectorFooterRowListPair,
              { key: 'pair', className: 'pair' },
              _react2.default.createElement(
                _styled.StyledInspectorFooterRowListKey,
                { className: 'key' },
                '<id>:'
              ),
              _react2.default.createElement(
                _styled.StyledInspectorFooterRowListValue,
                { className: 'value' },
                item.id
              )
            ),
            mapItemProperties(item.properties)
          );
        } else if (type === 'relationship') {
          var style = {
            backgroundColor: this.state.graphStyle.forRelationship(item).get('color'),
            color: this.state.graphStyle.forRelationship(item).get('text-color-internal')
          };
          inspectorContent = _react2.default.createElement(
            _styled.StyledInlineList,
            { className: 'list-inline' },
            _react2.default.createElement(
              _styled.StyledTokenRelationshipType,
              {
                key: 'token',
                style: style,
                className: 'token' + ' ' + 'token-relationship-type'
              },
              item.type
            ),
            _react2.default.createElement(
              _styled.StyledInspectorFooterRowListPair,
              { key: 'pair', className: 'pair' },
              _react2.default.createElement(
                _styled.StyledInspectorFooterRowListKey,
                { className: 'key' },
                '<id>:'
              ),
              _react2.default.createElement(
                _styled.StyledInspectorFooterRowListValue,
                { className: 'value' },
                item.id
              )
            ),
            mapItemProperties(item.properties)
          );
        }
      }

      return _react2.default.createElement(
        _styled.StyledStatusBar,
        {
          fullscreen: this.props.fullscreen,
          className: 'status-bar'
        },
        _react2.default.createElement(
          _styled.StyledStatus,
          { className: 'status' },
          _react2.default.createElement(
            _styled.StyledInspectorFooter,
            {
              className: this.state.contracted ? 'contracted inspector-footer' : 'inspector-footer'
            },
            _react2.default.createElement(
              _styled.StyledInspectorFooterRow,
              {
                'data-testid': 'vizInspector',
                className: 'inspector-footer-row',
                ref: this.setFooterRowELem.bind(this)
              },
              type === 'canvas' ? null : _react2.default.createElement(_RowExpandToggle.RowExpandToggleComponent, {
                contracted: this.state.contracted,
                rowElem: this.footerRowElem,
                containerHeight: _styled.inspectorFooterContractedHeight,
                onClick: this.toggleExpand.bind(this)
              }),
              inspectorContent
            )
          )
        )
      );
    }
  }, {
    key: 'toggleExpand',
    value: function toggleExpand() {
      var _this2 = this;

      this.setState({ contracted: !this.state.contracted }, function () {
        var inspectorHeight = _this2.footerRowElem.clientHeight;
        _this2.props.onExpandToggled && _this2.props.onExpandToggled(_this2.state.contracted, _this2.state.contracted ? 0 : inspectorHeight);
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _utils.deepEquals)(this.props.selectedItem, nextProps.selectedItem)) {
        this.setState({ contracted: true });
        this.props.onExpandToggled && this.props.onExpandToggled(true, 0);
      }
    }
  }]);

  return InspectorComponent;
}(_react.Component);
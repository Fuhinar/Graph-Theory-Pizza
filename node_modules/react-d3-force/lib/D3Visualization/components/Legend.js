'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LegendComponent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styled = require('./styled');

var _RowExpandToggle = require('./RowExpandToggle');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LegendComponent = exports.LegendComponent = function (_Component) {
  _inherits(LegendComponent, _Component);

  function LegendComponent(props) {
    _classCallCheck(this, LegendComponent);

    var _this = _possibleConstructorReturn(this, (LegendComponent.__proto__ || Object.getPrototypeOf(LegendComponent)).call(this, props));

    _this.state = {};
    _this.state.typeRowContracted = true;
    _this.state.labelRowContracted = true;
    return _this;
  }

  _createClass(LegendComponent, [{
    key: 'setTypeRowELem',
    value: function setTypeRowELem(elem) {
      if (elem) {
        this.state.typeRowElem = elem;
      }
    }
  }, {
    key: 'setLabelRowELem',
    value: function setLabelRowELem(elem) {
      if (elem) {
        this.state.labelRowELem = elem;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var mapLabels = function mapLabels(labels) {
        var labelList = Object.keys(labels).map(function (legendItemKey, i) {
          var styleForItem = _this2.props.graphStyle.forNode({
            labels: [legendItemKey]
          });
          var onClick = function onClick() {
            _this2.props.onSelectedLabel(legendItemKey, Object.keys(labels[legendItemKey].properties));
          };
          var style = {
            backgroundColor: styleForItem.get('color'),
            color: styleForItem.get('text-color-internal')
          };
          return _react2.default.createElement(
            _styled.StyledLegendInlineListItem,
            { key: i, 'data-testid': 'viz-legend-labels' },
            _react2.default.createElement(
              _styled.StyledLegendContents,
              { className: 'contents' },
              _react2.default.createElement(
                _styled.StyledLabelToken,
                {
                  onClick: onClick,
                  style: style,
                  className: 'token token-label'
                },
                legendItemKey,
                _react2.default.createElement(
                  _styled.StyledTokenCount,
                  { className: 'count' },
                  '(' + labels[legendItemKey].count + ')'
                )
              )
            )
          );
        });
        return _react2.default.createElement(
          _styled.StyledLegendRow,
          {
            className: _this2.state.labelRowContracted ? 'contracted' : ''
          },
          _react2.default.createElement(
            _styled.StyledLegendInlineList,
            {
              className: 'list-inline',
              ref: _this2.setLabelRowELem.bind(_this2)
            },
            _react2.default.createElement(_RowExpandToggle.RowExpandToggleComponent, {
              contracted: _this2.state.labelRowContracted,
              rowElem: _this2.state.labelRowELem,
              containerHeight: _styled.legendRowHeight,
              onClick: function onClick() {
                _this2.setState({
                  labelRowContracted: !_this2.state.labelRowContracted
                });
              }
            }),
            labelList
          )
        );
      };
      var mapRelTypes = function mapRelTypes(legendItems) {
        if (!legendItems || !Object.keys(legendItems).length) {
          return null;
        }
        var relTypeList = Object.keys(legendItems).map(function (legendItemKey, i) {
          var styleForItem = _this2.props.graphStyle.forRelationship({
            type: legendItemKey
          });
          var onClick = function onClick() {
            _this2.props.onSelectedRelType(legendItemKey, Object.keys(legendItems[legendItemKey].properties));
          };
          var style = {
            backgroundColor: styleForItem.get('color'),
            color: styleForItem.get('text-color-internal')
          };
          return _react2.default.createElement(
            _styled.StyledLegendInlineListItem,
            { key: i, 'data-testid': 'viz-legend-reltypes' },
            _react2.default.createElement(
              _styled.StyledLegendContents,
              { className: 'contents' },
              _react2.default.createElement(
                _styled.StyledTokenRelationshipType,
                {
                  onClick: onClick,
                  style: style,
                  className: 'token token-relationship-type'
                },
                legendItemKey,
                _react2.default.createElement(
                  _styled.StyledTokenCount,
                  { className: 'count' },
                  '(' + legendItems[legendItemKey].count + ')'
                )
              )
            )
          );
        });
        return _react2.default.createElement(
          _styled.StyledLegendRow,
          {
            className: _this2.state.typeRowContracted ? 'contracted' : ''
          },
          _react2.default.createElement(
            _styled.StyledLegendInlineList,
            {
              className: 'list-inline',
              ref: _this2.setTypeRowELem.bind(_this2)
            },
            _react2.default.createElement(_RowExpandToggle.RowExpandToggleComponent, {
              contracted: _this2.state.typeRowContracted,
              rowElem: _this2.state.typeRowElem,
              containerHeight: _styled.legendRowHeight,
              onClick: function onClick() {
                _this2.setState({
                  typeRowContracted: !_this2.state.typeRowContracted
                });
              }
            }),
            relTypeList
          )
        );
      };
      var relTypes = mapRelTypes(this.props.stats.relTypes);
      return _react2.default.createElement(
        _styled.StyledLegend,
        { className: relTypes ? '' : 'one-row' },
        mapLabels(this.props.stats.labels),
        relTypes
      );
    }
  }]);

  return LegendComponent;
}(_react.Component);
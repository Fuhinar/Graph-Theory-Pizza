'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphComponent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _mapper = require('../mapper');

var _GraphEventHandler = require('../GraphEventHandler');

require('../lib/visualization/index');

var _browserStyles = require('./browser-styles');

var _styled = require('./styled');

var _graphView = require('../lib/visualization/components/graphView');

var _graphView2 = _interopRequireDefault(_graphView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import { ZoomInIcon, ZoomOutIcon } from 'browser-components/icons/Icons'


var GraphComponent = exports.GraphComponent = function (_Component) {
  _inherits(GraphComponent, _Component);

  function GraphComponent(props) {
    _classCallCheck(this, GraphComponent);

    var _this = _possibleConstructorReturn(this, (GraphComponent.__proto__ || Object.getPrototypeOf(GraphComponent)).call(this, props));

    _this.addInternalRelationships = function (internalRelationships) {
      if (_this.graph) {
        _this.graph.addInternalRelationships((0, _mapper.mapRelationships)(internalRelationships, _this.graph));
        _this.props.onGraphModelChange((0, _mapper.getGraphStats)(_this.graph));
        _this.graphView.update();
        _this.graphEH.onItemMouseOut();
      }
    };

    _this.state = {
      zoomInLimitReached: true,
      zoomOutLimitReached: false,
      shouldResize: false,
      nodes: [],
      relationships: [],
      info: {}
    };
    return _this;
  }

  _createClass(GraphComponent, [{
    key: 'graphInit',
    value: function graphInit(el) {
      // 渲染svg图
      // console.log(el);
      this.svgElement = el;
    }
  }, {
    key: 'zoomInClicked',
    value: function zoomInClicked(el) {
      var limits = this.graphView.zoomIn(el);
      this.setState({
        zoomInLimitReached: limits.zoomInLimit,
        zoomOutLimitReached: limits.zoomOutLimit
      });
    }
  }, {
    key: 'zoomOutClicked',
    value: function zoomOutClicked(el) {
      var limits = this.graphView.zoomOut(el);
      this.setState({
        zoomInLimitReached: limits.zoomInLimit,
        zoomOutLimitReached: limits.zoomOutLimit
      });
    }
  }, {
    key: 'getVisualAreaHeight',
    value: function getVisualAreaHeight() {
      return this.props.frameHeight && this.props.fullscreen ? this.props.frameHeight - (_browserStyles.dim.frameStatusbarHeight + _browserStyles.dim.frameTitlebarHeight * 2) : this.props.frameHeight - _browserStyles.dim.frameStatusbarHeight || this.svgElement.parentNode.offsetHeight;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.svgElement != null) {
        this.initGraphView();
        this.graph && this.props.setGraph && this.props.setGraph(this.graph);
        this.props.getAutoCompleteCallback && this.props.getAutoCompleteCallback(this.addInternalRelationships);
        this.props.assignVisElement && this.props.assignVisElement(this.svgElement, this.graphView);
      }
    }
  }, {
    key: 'initGraphView',
    value: function initGraphView() {
      var _this2 = this;

      if (!this.graphView) {
        var NeoConstructor = _graphView2.default;
        var measureSize = function measureSize() {
          return {
            width: _this2.svgElement.offsetWidth,
            height: _this2.getVisualAreaHeight()
          };
        };
        this.graph = (0, _mapper.createGraph)(this.props.nodes, this.props.relationships);
        this.graphView = new NeoConstructor(this.svgElement, measureSize, this.graph, this.props.graphStyle);
        this.graphEH = new _GraphEventHandler.GraphEventHandler(this.graph, this.graphView, this.props.getNodeNeighbours, this.props.onItemMouseOver, this.props.onItemSelect, this.props.onGraphModelChange, this.props.onEventListener);
        this.setState({
          info: this.graphEH
        });
        this.graphEH.bindEventHandlers();
        this.props.onGraphModelChange((0, _mapper.getGraphStats)(this.graph));
        this.graphView.resize();
        this.graphView.update();
        if (this.props.getGraph) {
          this.props.getGraph({
            graph: this.graph,
            graphEH: this.graphEH,
            graphView: this.graphView
          });
        }
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.nodes.length > 0 || props.relationships.length > 0) {
        this.setState({
          nodes: props.nodes,
          relationships: props.relationships
        });
      }
      if (props.styleVersion !== this.props.styleVersion) {
        this.graphView.update();
      }
      if (this.props.fullscreen !== props.fullscreen || this.props.frameHeight !== props.frameHeight) {
        this.setState({ shouldResize: true });
      } else {
        this.setState({ shouldResize: false });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.state.shouldResize) {
        this.graphView.resize();
      }
      var _state$info = this.state.info,
          graph = _state$info.graph,
          graphView = _state$info.graphView;
      var _state = this.state,
          nodes = _state.nodes,
          relationships = _state.relationships;
      // console.log('是否更新:',this.props.isUpdate)

      if (this.props.isUpdate) {
        graph.addNodes((0, _mapper.mapNodes)(nodes));

        graph.addRelationships((0, _mapper.mapRelationships)(relationships, graph));
        graphView.update();
        // 更新完毕 更改是否更新状态
        this.props.changeUpdateStatus(false);
      }
    }
  }, {
    key: 'zoomButtons',
    value: function zoomButtons() {
      if (this.props.fullscreen) {
        return _react2.default.createElement(
          _styled.StyledZoomHolder,
          null,
          _react2.default.createElement(_styled.StyledZoomButton, {
            className: this.state.zoomInLimitReached ? 'faded zoom-in' : 'zoom-in',
            onClick: this.zoomInClicked.bind(this)
          }),
          _react2.default.createElement(_styled.StyledZoomButton, {
            className: this.state.zoomOutLimitReached ? 'faded zoom-out' : 'zoom-out',
            onClick: this.zoomOutClicked.bind(this)
          })
        );
      }
      return null;
    }
  }, {
    key: 'render',
    value: function render() {
      var info = this.state.info;

      return _react2.default.createElement(
        _styled.StyledSvgWrapper,
        { theme: { name: 'normal' } },
        _react2.default.createElement('svg', { className: 'neod3viz', ref: this.graphInit.bind(this) }),
        this.zoomButtons()
      );
    }
  }]);

  return GraphComponent;
}(_react.Component);